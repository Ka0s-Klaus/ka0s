name: Ka0s 
on: 
  push:
    paths:
      - '**.yaml'
      - '**.yml'
      - '**.json'
      - '**.md'
      - '**.py'
    branches:
      - 'H*'
      - 'F*'
      - 'RN*'
env:
    KAOS_CODE: ${{ github.run_id }}
    KAOS_EVENT_NAME: ${{ github.event_name }}
    KAOS_ACTION: ${{ github.action }}
    KAOS_REF: ${{ github.ref }}
    KAOS_MODULE: "[Ka0S] kaos"
    KAOS_PATH_RESUME: "core/results/k/"
    KAOS_JSON: "core/results/event_data_"
    KAOS_ACTOR: ${{ github.actor }}
jobs: 
  job-core:
    runs-on:
      group: ka0s
    env:
      GITHUB_OUTPUT: ""
    if: ${{ !contains(github.event.head_commit.message, '[Ka0S] ') }} 
    steps:
      - id: repo
        name: Checkout code
        if: ${{ always() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: validate
        name: Validate file extensions
        env:
          GH_TOKEN: ${{ secrets.KAOS_REPO_TOKEN }}
        run: |
          IFS=' ' read -r -a extensions <<< "${{ secrets.KAOS_CORE_FILES }}"
          for file in $(git diff --name-only HEAD~1 HEAD); do
            extension="${file##*.}"
            if [[ ! " ${extensions[@]} " =~ " ${extension} " ]]; then
              echo "File $file has an invalid extension: $extension"
            fi
          done
          RNNUMBER=$(echo "${{ github.ref_name }}" | grep -o '[0-9]*')
          gh issue comment $RNNUMBER --body "Se inicia Ka0s ${{ env.KAOS_CODE }} "
      - name: Crear JSON
        id: crear_json
        run: |
          # Create JSON structure using proper bash syntax
          cat > ${{ env.KAOS_JSON }}${{ github.run_id }}.json << EOF
          {
            "event_type": "${{ env.KAOS_EVENT_NAME }}",
            "trigger_branch": "${{ github.ref }}",
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "author": {
              "name": "${{ github.event.pusher.name }}",
              "email": "${{ github.event.pusher.email }}"
            },
            "commits": [],
            "files": []
          }
          EOF

          # Add commits if this is a push event
          if [[ "${{ env.KAOS_EVENT_NAME }}" == "push" ]]; then
            # Create a temporary file for commits
            TEMP_COMMITS=$(mktemp)
            echo "[" > "$TEMP_COMMITS"
            
            # Process each commit
            FIRST=true
            while IFS= read -r commit; do
              if [ "$FIRST" = true ]; then
                FIRST=false
              else
                echo "," >> "$TEMP_COMMITS"
              fi
              git log -1 --pretty=format:'{"sha":"%H","author":"%an","email":"%ae","date":"%aI","message":"%s"}' "$commit" >> "$TEMP_COMMITS"
            done < <(git rev-list ${{ github.event.before }}..${{ github.sha }})
            echo "]" >> "$TEMP_COMMITS"
            
            # Insert commits into main JSON
            sed -i.bak -e '/"commits": \[/r '$TEMP_COMMITS'' -e '/"commits": \[/d' ${{ env.KAOS_JSON }}${{ github.run_id }}.json
            rm "$TEMP_COMMITS"

            # Add changed files
            TEMP_FILES=$(mktemp)
            echo "[" > "$TEMP_FILES"
            FIRST=true
            while IFS= read -r file; do
              if [ "$FIRST" = true ]; then
                FIRST=false
              else
                echo "," >> "$TEMP_FILES"
              fi
              echo "\"$file\"" >> "$TEMP_FILES"
            done < <(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
            echo "]" >> "$TEMP_FILES"
            
            # Insert files into main JSON
            sed -i.bak -e '/"files": \[/r '$TEMP_FILES'' -e '/"files": \[/d' ${{ env.KAOS_JSON }}${{ github.run_id }}.json
            rm "$TEMP_FILES"
          elif [[ "${{ env.KAOS_EVENT_NAME }}" == "pull_request" ]]; then
            # Add pull request information
            TEMP_PR=$(mktemp)
            cat > "$TEMP_PR" << EOF
            ,"pull_request": {
              "action": "${{ github.event.action }}",
              "number": "${{ github.event.number }}",
              "title": "${{ github.event.pull_request.title }}"
            }
          EOF
            sed -i.bak -e '/}$/r '$TEMP_PR'' ${{ env.KAOS_JSON }}${{ github.run_id }}.json
            rm "$TEMP_PR"
          elif [[ "${{ env.KAOS_EVENT_NAME }}" == "issues" ]]; then
            # Add issue information
            TEMP_ISSUE=$(mktemp)
            cat > "$TEMP_ISSUE" << EOF
            ,"issue": {
              "action": "${{ github.event.action }}",
              "number": "${{ github.event.issue.number }}",
              "title": "${{ github.event.issue.title }}"
            }
          EOF
            sed -i.bak -e '/}$/r '$TEMP_ISSUE'' ${{ env.KAOS_JSON }}${{ github.run_id }}.json
            rm "$TEMP_ISSUE"
          fi

          # Store the file path for later use
          INVOLVED=${{ env.KAOS_PATH_RESUME }}files-in-commit-$KAOS_CODE_FILES.txt
          echo "INVOLVED=$INVOLVED" >> $GITHUB_ENV
      - name: Set environment variable for ref
        id: ref
        run: echo "GITHUB_REF=${{ github.ref }}" >> $GITHUB_ENV
      - id: upload-files
        name: Upload Files
        run: |
          echo "Uploading files to the repository..."
          git config --global user.name "${{ secrets.KAOS_BOT_NAME }}"
          git config --global user.email "${{ secrets.KAOS_BOT_EMAIL }}"
          git pull
          git add ${{ env.KAOS_JSON }}*
          git commit -m "[Ka0S] Uploading resume execution files to the repository..."
          git push origin ${{ github.ref }}
          git push origin $GITHUB_REF     
      - id: module
        env:
            modules: ${{ secrets.KAOS_CORE_MODULES }}
            files: ${{ secrets.KAOS_CORE_FILES }}
            GH_TOKEN: ${{ secrets.KAOS_ACTIONS_TOKEN}}
        run: |
          git diff --name-only ${{ github.event.before }} ${{ github.sha }} > files-in-commit.txt
          cat files-in-commit.txt
          # Nuevo proceso de activacion de los modulos
          while IFS= read -r line; do
            # Skip files in core/outputs directory
            if [[ "$line" == core/outputs/* ]]; then
              echo "Skipping file in outputs directory: $line"
              continue
            fi
            echo "I Leemos el fichero files-in-commit.txt y extraemos el fichero $line"
            module_failed=0
            extension_failed=0
            file_name=$(basename "$line")
            echo "I-1 Calculamos el nombre del fichero $file_name"
            file_extension="${file_name##*.}"
            echo "I-2 Calculamos la extension del fichero $file_extension"
            file_module="$file_extension""lint.yml"
            echo "I-3 Calculamos el modulo $file_module"
            IFS=',' read -r -a file_array <<< "$files"
            for file in "${file_array[@]}"; do
              echo "II Leemos el array de $file"
              if [[ "$file_extension" == "$file" ]]; then
                echo "III Comprobamos si $file_extension es igual a $file"
                IFS=',' read -r -a module_array <<< "$modules"
                for module in "${module_array[@]}"; do
                  echo "IV Leemos el array $module"
                  if [[ "$file_module" == *"$module"* ]]; then
                    echo "V Comprobamos que el $file_module es igual a $module y ejecutamos el flujo"
                    # Si hemos llegado hasta aquí ejecutamos el módulo
                    # Lanzamos el lint del fichero
                    RNNUMBER=$(echo "${{ github.ref }}" | grep -o '[0-9]*')
                    echo "El numero de la issue es: $RNNUMBER"
                    gh workflow run $file_module --ref ${{ github.ref }} -f kaos-origin=${{ github.run_id }} -f kaos-files=$line -f kaos-issue-id=$RNNUMBER -f kaos-user-start=${{ env.KAOS_ACTOR }}
                    module_failed=0
                    extension_failed=0
                    break
                  else
                    # Control de si existe el modulo para esa extension"
                    echo "VI No es igual $file_module a $module y lo indicamos en la variable module_failed=1"
                    module_failed=1
                  fi
                done
                break
              else
                # Control de si existe el modulo para esa extension"
                echo "VII No es igual $file_extension a $file y lo indicamos en la variable extension_failed=1"
                extension_failed=1
              fi  
            done
            if [[ $module_failed == 1 ]]; then
              echo "IX Si el modulo falla ($module_failed) añadimos el comentario a la issue"
              # Si hemos llegado hasta aquí añadimos el mensaje de que la extension esta permitida pero no dispone de modulo activo y aqui finaliza el proceso
              # Añadimos los valores a las variables de la issue
              KAOS_ISSUE_BODY="${{ env.KAOS_MODULE }} ha detectado que la extensión ($file_extension) esta permitida dentro de KAOS_CORE_FILES, pero el módulo asociado ($file_module) no esta activo. Por favor compruebe que exista y esta activo."
              # Añadimos el comentario a la issue
              RNNUMBER=$(echo "${{ github.ref }}" | grep -o '[0-9]*')
              gh issue comment $RNNUMBER --body "$KAOS_ISSUE_BODY"
            fi
            if [[ $extension_failed == 1 ]]; then
              echo "X Si extension falla falla ($extension_failed) añadimos el comentario a la issue"
              # Si hemos llegado hasta aquí añadimos el mensaje de que la extension no esta permitida
              # Añadimos los valores a las variables de la issue
              KAOS_ISSUE_BODY="${{ env.KAOS_MODULE }} ha detectado que la extensión ($file_extension) NO esta permitida dentro de KAOS_CORE_FILES. Por favor compruebe que exista y esta activo."
              # Añadimos el comentario a la issue
              RNNUMBER=$(echo "${{ github.ref }}" | grep -o '[0-9]*')
              gh issue comment $RNNUMBER --body "$KAOS_ISSUE_BODY"
            fi  
          done < files-in-commit.txt      
  handle-success:
    runs-on:
      group: ka0s
    needs: [job-core]
    if: ${{ success() }}
    steps:
      - id: repo
        name: Checkout code
        if: ${{ always() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: handle-success-execution
        name: handle-success-execution
        env:
          GH_TOKEN: ${{ secrets.KAOS_REPO_TOKEN }}
        run: |
          # Si todo ha ido correcto añadimos el contenido del fichero 
          RNNUMBER=$(echo "${{ github.ref }}" | grep -o '[0-9]*')
          gh issue comment $RNNUMBER --body "El proceso ha finalizado correctamente ${{ env.KAOS_CODE }}. El resultado está en el fichero core/results/event_data${{ env.KAOS_CODE }}.log"
  handle_failure:
    runs-on:
      group: ka0s
    needs: [job-core, handle-success]
    if: ${{ failure() }} 
    steps:
      - id: repo
        name: Checkout code
        if: ${{ always() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: handle-failure-execution
        name: handle-failure-execution
        env:
          GH_TOKEN: ${{ secrets.KAOS_REPO_TOKEN }}
        run: |
          echo "Error detected in process"
          RNNUMBER=$(echo "${{ github.ref }}" | grep -o '[0-9]*')
          gh issue comment $RNNUMBER --body "El proceso no ha finalizado correctamente ${{ env.KAOS_CODE }}. El resultado está en el fichero core/results/event_data${{ env.KAOS_CODE }}.log"
  end-workflow:
    runs-on:
      group: ka0s
    needs: [job-core, handle-success, handle_failure]
    if: ${{ always() && !contains(github.event.head_commit.message, '[Ka0S] ') }} 
    env:
        GH_TOKEN: ${{ secrets.KAOS_ACTIONS_TOKEN }}
    steps:
      - id: repo
        name: Checkout code
        if: ${{ always() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: end-process
        name: Finaliza el workflow
        run: |
          echo "End process"
          RNNUMBER=$(echo "${{ github.ref }}" | grep -o '[0-9]*')
          gh issue comment $RNNUMBER --body "Se finaliza Ka0s ${{ env.KAOS_CODE }}"
          gh workflow run inspector.yml --ref 'main' -f kaos-issue-id=$RNNUMBER -f kaos-workflow-id="${{ env.KAOS_CODE }}" -f kaos-user-start=""
