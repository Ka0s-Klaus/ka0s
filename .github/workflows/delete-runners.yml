name: Ka0s Delete Group Runners

on:
  workflow_dispatch:
    inputs:
      runner_group:
        description: 'Nombre del grupo de runners a eliminar'
        required: true
        type: string

env:
  GITHUB_TOKEN: ${{ secrets.KAOS_ACTIONS_RUNNERS }}
  KAOS_MODULE: "[Ka0s] Delete Swarm Runners"
  KAOS_CODE: ${{ github.run_id }}

permissions:
  actions: write      # needed for runner operations
  issues: write       # needed for issue creation/comment
  contents: read      # safest minimal contents permission

jobs:
  job-core:
    runs-on:
      group: swarm-runners
    steps:
      - name: Get Runners
        id: get-runners
        run: |
          # Crear el directorio para los resultados
          mkdir -p runner_results

          # Mostrar todos los grupos de runners de la organización
          echo "Grupos de runners disponibles:" | tee -a runner_results/delete_runners_report.txt
          gh api \
            -H "Accept: application/vnd.github+json" \
            /orgs/${{ github.repository_owner }}/actions/runner-groups \
            --jq '.runner_groups[]'

          # Obtener la lista de runners del grupo especificado
          echo "Obtener la lista de runners del grupo especificado: ${{ inputs.runner_group }}" | tee -a runner_results/delete_runners_report.txt
          RUNNERS=$(gh api \
            -H "Accept: application/vnd.github+json" \
            /orgs/${{ github.repository_owner }}/actions/runners \
            --paginate \
            --jq '.runners[] | .name'\
            | tr '\n' ',')

          echo "$RUNNERS" 
          if [ -n "$RUNNERS" ]; then
            echo "runner_names=$RUNNERS" >> $GITHUB_OUTPUT
            echo "Runners encontrados: $RUNNERS" 
          else
            echo "runner_names=" >> $GITHUB_OUTPUT
            echo "No se encontraron runners" 
          fi
      - name: List Self-hosted Runners
        if: success()
        run: |
          # Extraer un fichero con todo el contenido de los runners de la organizacion
          echo "activar o desactivar a demanda"
          # gh api \
          #     -H "Accept: application/vnd.github+json" \
          #     -H "X-GitHub-Api-Version: 2022-11-28" \
          #     /orgs/${{ github.repository_owner }}/actions/runners > list_self-hosted_runners.json
      - name: Get Schema Runners
        if: success()
        run: |
          # Convertir la lista de runners en un array
          # IFS=',' read -r -a RUNNER_NAMES <<< "${{ steps.get-runners.outputs.runner_names }}"
          echo "activar o desactivar a demanda"
          # Mostrar información detallada de cada runner
          # for runner_name in "${RUNNER_NAMES[@]}"; do
          #   if [ -n "$runner_name" ]; then
          #     # echo "\nObteniendo información del runner: $runner_name"
          #     gh api \
          #       -H "Accept: application/vnd.github+json" \
          #       -H "X-GitHub-Api-Version: 2022-11-28" \
          #       "/orgs/${{ github.repository_owner }}/actions/runners"  >> get_schema_runners.json
          #   fi
          # done
      - name: Delete Runners
        if: success()
        run: |
          # Convertir la lista de runners en un array
          IFS=',' read -r -a RUNNER_NAMES <<< "${{ steps.get-runners.outputs.runner_names }}"
          
          # Eliminar cada runner y mostrar el resultado
          echo "\nResultados de la eliminación:"
          for runner_name in "${RUNNER_NAMES[@]}"; do
            # Ignorar elementos vacíos
            if [ -z "$runner_name" ]; then
              continue
            fi
            echo "Eliminando runner $runner_name..."
            
            RESPONSE=$(gh api \
              --method DELETE \
              -H "Accept: application/vnd.github+json" \
              --include \
              "/orgs/${{ github.repository_owner }}/actions/runners/$runner_name")
            STATUS_CODE=$(echo "$RESPONSE" | grep -i '^HTTP' | awk '{print $2}')
            
            if [ "$STATUS_CODE" = "204" ]; then
              echo "✓ Runner $runner_name eliminado exitosamente"
              echo "Código de estado HTTP: $STATUS_CODE"
            else
              echo "✗ Error al eliminar runner $runner_name"
              echo "Código de estado HTTP: $STATUS_CODE"
              echo "Respuesta completa: $RESPONSE"
              exit 1
            fi
          done
      - name: Check Results
        run: |
          if [[ -z "${{ steps.get-runners.outputs.runner_names }}" ]]; then
            echo "No se encontraron runners en el grupo ${{ inputs.runner_group }}"
          else
            echo "Runners eliminados exitosamente del grupo ${{ inputs.runner_group }}"
          fi
      - name: Upload
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: runners-json-files
          path: |
            list_self-hosted_runners.json
            get_schema_runners.json
          retention-days: 5

  handle-success:
    runs-on:
      group: swarm-runners
    needs: [job-core]
    if: ${{ success() }}
    steps:
      - id: repo
        name: Checkout code
        if: ${{ always() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: handle-success-execution
        name: handle-success-execution
        env:
          GH_TOKEN: ${{ secrets.KAOS_REPO_TOKEN }}
        run: |
          # RNNUMBER=$(echo "${{ github.ref }}" | grep -o '[0-9]*')
          # gh issue comment $RNNUMBER --body "El proceso ha finalizado correctamente ${{ env.KAOS_CODE }}. El resultado está en el fichero core/results/event_data_${{ env.KAOS_CODE }}.log"
          echo "El proceso ha finalizado correctamente ${{ env.KAOS_CODE }}. El resultado está en el fichero core/results/event_data_${{ env.KAOS_CODE }}.log"

  handle_failure:
    runs-on:
      group: swarm-runners
    needs: [job-core, handle-success]
    if: ${{ failure() }}
    steps:
      - id: repo
        name: Checkout code
        if: ${{ always() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: handle-failure-execution
        name: handle-failure-execution
        env:
          GH_TOKEN: ${{ secrets.KAOS_REPO_TOKEN }}
        run: |
          echo "Error detected in process"
          # RNNUMBER=$(echo "${{ github.ref }}" | grep -o '[0-9]*')
          # gh issue comment $RNNUMBER --body "El proceso no ha finalizado correctamente ${{ env.KAOS_CODE }}. El resultado está en el fichero core/results/event_data${{ env.KAOS_CODE }}.log"
          # Creamos la issue dado que ha fallado el modulo principal
          gh issue create  --title "[Ka0S] Error detected in ${{ env.KAOS_MODULE }}" --body "Error detected in ${{ env.KAOS_MODULE }}. Please check the logs for ${{ github.run_id }} more information of error."
          
  end-workflow:
    runs-on:
      group: swarm-runners
    needs: [job-core, handle-success, handle_failure]
    if: ${{ always() && !contains(github.event.head_commit.message, '[Ka0S] ') }}
    env:
        GH_TOKEN: ${{ secrets.KAOS_REPO_TOKEN }}
    steps:
      - id: repo
        name: Checkout code
        if: ${{ always() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: end-process
        name: Finaliza el workflow
        run: |
          echo "End process"
          # RNNUMBER=$(echo "${{ github.ref }}" | grep -o '[0-9]*')
          # gh issue comment $RNNUMBER --body "Se finaliza Ka0s ${{ env.KAOS_CODE }}"
          echo "Se finaliza Ka0s ${{ env.KAOS_CODE }}"
          gh workflow run inspector.yml --ref 'main' -f kaos-workflow-id="${{ env.KAOS_CODE }}" -f kaos-user-start=""

