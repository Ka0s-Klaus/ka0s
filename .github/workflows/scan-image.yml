name: Ka0s Scan Images
on:
  workflow_dispatch:
    inputs:
      image_name:
        description: 'Nombre de la imagen Docker'
        required: true
        type: string
      dockerfile_path:
        description: 'Ruta al Dockerfile'
        required: true
        type: string
      version:
        description: 'Número de la versión (0.0.0)'
        required: true
        type: string
env:
  GITHUB_TOKEN: ${{ secrets.KAOS_ACTIONS_RUNNERS }}
  KAOS_MODULE: "[Ka0s] Personalized Image Runners"
  KAOS_CODE: ${{ github.run_id }}
  KAOS_PATH_SCAN: "audit/scan/"

permissions:
  actions: write      # needed for runner operations
  issues: write       # needed for issue creation/comment
  contents: read      # safest minimal contents permission

jobs:
  job-core:
    runs-on:
      group: swarm-runners
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ka0score
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build image
        if: success()
        run: |
          # Construimos la imagen
          sudo docker build -t ${{ inputs.image_name }}:${{ inputs.version }} -f ${{ inputs.dockerfile_path }} . || true
          echo "Se ha generado la imagen ${{ inputs.image_name }}:${{ inputs.version }}...."
          sudo usermod -aG docker runner 
    
      - name: Install Trivy vulnerability scanner
        if: success()
        run: |
          # Instalamos Trivy directamente desde el script oficial
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin v0.48.3

          # Ejecutamos el escaneo de la imagen
          sudo trivy image --severity HIGH,CRITICAL --ignore-unfixed --format table ${{ inputs.image_name }}:${{ inputs.version }}
          sudo trivy image --severity HIGH,CRITICAL --ignore-unfixed --format json ${{ inputs.image_name }}:${{ inputs.version }} > ${{ env.KAOS_PATH_SCAN }}${{ env.KAOS_CODE }}.json
          echo "Subimos el scan_image_from_${{ env.KAOS_CODE }}.json a la ruta ${{ env.KAOS_PATH_SCAN }}"
          echo "Uploading files to the repository..."
          git config --global user.name "${{ secrets.KAOS_BOT_NAME }}"
          git config --global user.email "${{ secrets.KAOS_BOT_EMAIL }}"
          git pull --rebase
          git add ${{ env.KAOS_PATH_SCAN }}*
          git commit -m "[Ka0s] Add scan image from ${{ env.KAOS_CODE }}" || echo "No changes to commit"
          MAX_RETRIES=3
          COUNT=0
          until git push origin ${{ github.ref }} --force-with-lease; do
            COUNT=$((COUNT+1))
            if [ $COUNT -ge $MAX_RETRIES ]; then
              echo "❌ Error: git push failed after $MAX_RETRIES attempts."
              exit 1
            fi
            echo "⚠️ git push failed, retrying ($COUNT/$MAX_RETRIES)..."
            git pull --rebase
            sleep 2
          done

      - name: Tag and Push if scan passes
        if: success()
        run: |
            # Logeamos en docker hub
            sudo docker login -u ka0score -p ${{ secrets.DOCKERHUB_TOKEN }}
            # Añadimos la imagen a la version
            sudo docker tag ${{ inputs.image_name }}:${{ inputs.version }} ka0score/${{ inputs.image_name }}:${{ inputs.version }}
            echo "Se ha generado la version ka0score/${{ inputs.image_name }}:${{ inputs.version }} ...."
            # Subimos las imagenes
            sudo docker push ka0score/${{ inputs.image_name }}:${{ inputs.version }}

  handle-success:
    runs-on:
      group: swarm-runners
    needs: [job-core]
    if: ${{ success() }}
    steps:
      - id: repo
        name: Checkout code
        if: ${{ always() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: handle-success-execution
        name: handle-success-execution
        env:
          GH_TOKEN: ${{ secrets.KAOS_REPO_TOKEN }}
        run: |
          # RNNUMBER=$(echo "${{ github.ref }}" | grep -o '[0-9]*')
          # gh issue comment $RNNUMBER --body "El proceso ha finalizado correctamente ${{ env.KAOS_CODE }}. El resultado está en el fichero core/results/event_data_${{ env.KAOS_CODE }}.log"
          echo "El proceso ha finalizado correctamente ${{ env.KAOS_CODE }}. El resultado está en el fichero core/results/event_data_${{ env.KAOS_CODE }}.log"

  handle_failure:
    runs-on:
      group: swarm-runners
    needs: [job-core, handle-success]
    if: ${{ failure() }}
    steps:
      - id: repo
        name: Checkout code
        if: ${{ always() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: handle-failure-execution
        name: handle-failure-execution
        env:
          GH_TOKEN: ${{ secrets.KAOS_REPO_TOKEN }}
        run: |
          echo "Error detected in process ${{ inputs.image_name }}:${{ inputs.version }} ka0score/${{ inputs.image_name }}:${{ inputs.version }}"
          # RNNUMBER=$(echo "${{ github.ref }}" | grep -o '[0-9]*')
          # gh issue comment $RNNUMBER --body "El proceso no ha finalizado correctamente ${{ env.KAOS_CODE }}. El resultado está en el fichero core/results/event_data${{ env.KAOS_CODE }}.log"
          # Creamos la issue dado que ha fallado el modulo principal
          gh issue create  --title "[Ka0S] Error detected in ${{ env.KAOS_MODULE }}" --body "Error detected in ${{ env.KAOS_MODULE }}. Please check the logs for ${{ github.run_id }} more information of error."
          
  end-workflow:
    runs-on:
      group: swarm-runners
    needs: [job-core, handle-success, handle_failure]
    if: ${{ always() && !contains(github.event.head_commit.message, '[Ka0S] ') }}
    env:
        GH_TOKEN: ${{ secrets.KAOS_REPO_TOKEN }}
    steps:
      - id: repo
        name: Checkout code
        if: ${{ always() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: end-process
        name: Finaliza el workflow
        run: |
          echo "End process"
          # RNNUMBER=$(echo "${{ github.ref }}" | grep -o '[0-9]*')
          # gh issue comment $RNNUMBER --body "Se finaliza Ka0s ${{ env.KAOS_CODE }}"
          echo "Se finaliza Ka0s ${{ env.KAOS_CODE }}"
          gh workflow run inspector.yml --ref 'main' -f kaos-workflow-id="${{ env.KAOS_CODE }}"





      