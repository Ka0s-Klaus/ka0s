name: Ka0s Execution
on:
  issues:
    types: [opened]
permissions:
  contents: write
  actions: write
  issues: write
  pull-requests: write
env:
  KAOS_MODULE: "[Ka0S] Execution"
  GH_TOKEN: ${{ secrets.KAOS_REPO_TOKEN }}
  BRANCH_NAME: ${{ github.ref }}
  KAOS_AUTOMATION_COMPLIANCE: "compliance/core/core.json"
  KAOS_PATH_RESUME: "audit/eresults/"
  KAOS_PATH_OUTPUT: "audit/execution/"
  KAOS_REPO: "/actions-runner/_work/kaos/kaos"
  KAOS_STEP_MODULE: ""
  KAOS_CODE: ${{ github.run_id }}
  KAOS_ISSUE_NUMBER: ${{ github.event.issue.number }}
  KAOS_ISSUE_TITLE: ${{ github.event.issue.title }}
  KAOS_ISSUE_BODY: ${{ github.event.issue.body }}
  KAOS_ISSUE_MESSAGE: ""
  # KAOS_ISSUE_LABELS: ${{ github.event.issue.labels }}
  KAOS_ISSUE_USER: ${{ github.actor}}
jobs:
  job-repo:
    runs-on: 
      group: execution
    if: ${{ startsWith(github.event.issue.title, '[E]') && github.ref == 'refs/heads/main' }}
    steps:
      - id: repo
        name: Checkout repository
        if: ${{ success() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: message
        name: Message
        if: ${{ success() }}
        run: |
          echo "Init repository"
          gh issue comment ${{ env.KAOS_ISSUE_NUMBER }} --body 'Se ha iniciado la ejecución #${{ env.KAOS_CODE}} a través de la tarjeta #${{ env.KAOS_ISSUE_NUMBER }}.'
          gh issue comment ${{ env.KAOS_ISSUE_NUMBER }} --body 'Se ha iniciado el Repositorio.' 
  check-issue:
    runs-on: 
      group: execution
    needs: job-repo
    steps:
      - id: repo
        name: Checkout repository
        if: ${{ success() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: check-info
        name: Check Info
        if: ${{ success() }}
        run: |
            echo "Check issue for execution $KAOS_ISSUE_NUMBER"
            gh issue comment ${{ env.KAOS_ISSUE_NUMBER }} --body 'Se ha comprobado que la tarjeta #${{ env.KAOS_ISSUE_NUMBER }} se puede ejecutar."'     
      - id: check-kaos
        name: Check Kaos
        if: ${{ success() }}
        run: |
          echo "Extraemos el usuario asignado"
          echo "KAOS_ISSUE_USER=$(gh issue view $KAOS_ISSUE_NUMBER --json assignees |jq -r '.assignees[].login')" >> $GITHUB_ENV
          echo "Añadimos la etiqueta automations a la tarjeta"
          gh issue edit $KAOS_ISSUE_NUMBER --add-label 'automations'
  check-data:
    runs-on: 
      group: execution
    needs: check-issue
    outputs:
      KAOS_EXECUTION_TYPE: ${{ steps.extract.outputs.KAOS_EXECUTION_TYPE }}
      KAOS_EXECUTION_VARS: ${{ steps.extract.outputs.KAOS_EXECUTION_VARS }}
    if: ${{ success() }}
    steps:
      - id: repo
        name: Checkout repository
        if: ${{ success() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: extract
        name: extract data
        if: ${{ success() }}
        run: |
            echo "Extract data"
            # Separar las claves y valores
            IFS=',' read -ra PAIRS <<< "$KAOS_ISSUE_BODY"
            # Procesar el primer par clave-valor
            FIRST_PAIR=${PAIRS[0]}
            # Eliminar las comillas
            FIRST_PAIR=$(echo $FIRST_PAIR | tr -d '"')
            # Separar la clave y el valor
            IFS=':' read -ra KV <<< "$FIRST_PAIR"
            FIRST_KEY=${KV[0]}
            FIRST_VALUE=${KV[1]}
            # Procesar el resto de los pares clave-valor
            REMAINING_PAIRS="${PAIRS[@]:1}"
            REMAINING_VALUES=""   
            for PAIR in ${REMAINING_PAIRS[@]}; do
                # Eliminar las comillas
                PAIR=$(echo $PAIR | tr -d '"')
                # Separar la clave y el valor
                IFS=':' read -ra KV <<< "$PAIR"
                KEY=${KV[0]}
                VALUE=${KV[1]}
                # Añadir al string de valores restantes
                REMAINING_VALUES+="$KEY:$VALUE;"
            done
            echo "KAOS_EXECUTION_VARS=$REMAINING_VALUES" >> $GITHUB_OUTPUT
            # Eliminar el último punto y coma
            REMAINING_VALUES=${REMAINING_VALUES%?}            
            # Asignar el valor de la primera clave a una variable
            echo "El primer valor de la ejecucion es $FIRST_VALUE"
            echo "KAOS_EXECUTION_TYPE=$FIRST_VALUE" >> $GITHUB_OUTPUT
            gh issue comment ${{ env.KAOS_ISSUE_NUMBER }} --body 'Se han extraido los datos de la tarjeta #${{ env.KAOS_ISSUE_NUMBER }}.'
      - id: data
        name: Check data
        if: ${{ success() }}
        run: |
            echo "Check lógical data"
            # Cambiamos de Backlog a In Progress
            gh issue comment ${{ env.KAOS_ISSUE_NUMBER }} --body 'Se comprobado los datos asociados a la tarjeta #${{ env.KAOS_ISSUE_NUMBER }}.'
  show-data:
    runs-on: 
      group: execution
    needs: check-data
    steps:
      - id: repo
        name: Checkout repository
        if: ${{ success() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: show
        name: Show data
        if: ${{ success() }}
        run: |
          echo "Datos de la ejecución"
          echo "KAOS_ISSUE_NUMBER: $KAOS_ISSUE_NUMBER" 
          echo "KAOS_ISSUE_TITLE: $KAOS_ISSUE_TITLE"
          echo "KAOS_ISSUE_BODY: $KAOS_ISSUE_BODY"
          gh issue comment ${{ env.KAOS_ISSUE_NUMBER }} --body 'Estos son los datos de la ejecucion #${{ env.KAOS_CODE}} de la tarjeta #${{ env.KAOS_ISSUE_NUMBER }}.\
              KAOS_ISSUE_NUMBER: ${{ env.KAOS_ISSUE_NUMBER }}  \
              KAOS_ISSUE_TITLE: ${{ env.KAOS_ISSUE_TITLE }}  \
              KAOS_ISSUE_BODY: ${{ env.KAOS_ISSUE_BODY }} '
  start-execution:
    runs-on: 
      group: execution
    needs: [check-issue, check-data, show-data]
    outputs:
        KAOS_EXECUTION_RESULT: ${{ steps.execution.outputs.KAOS_EXECUTION_RESULT }}
        KAOS_EXECUTION_STATUS: ${{ steps.execution.outputs.KAOS_EXECUTION_STATUS }}
        KAOS_EXECUTION_RUN_ID: ${{ steps.type.outputs.RUN_ID }}
    steps:
      - id: repo
        name: Checkout repository
        if: ${{ success() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: execution
        name: Start execution
        if: ${{ success() }}
        run: |
          # Sección donde definimos como será la ejecución
          echo "Start execution"
          gh issue comment ${{ env.KAOS_ISSUE_NUMBER }} --body 'Se ha iniciado la ejecución de la tarjeta #${{ env.KAOS_ISSUE_NUMBER }}.'
          echo "KAOS_EXECUTION_RESULT=fichero_de_resultado" >> $GITHUB_OUTPUT
          echo "KAOS_EXECUTION_STATUS=success" >> $GITHUB_OUTPUT
      - id: type
        name: Execution type
        if: ${{ success() }}
        run: |
          echo "Check type"
          echo " Se va a ejecutar el workflow ${{ needs.check-data.outputs.KAOS_EXECUTION_TYPE }}.yml"
          # Buscar el valorexecution en el formato JSON de la ejecución
          RESULT=$(jq -r --arg valorexecution "${{ needs.check-data.outputs.KAOS_EXECUTION_TYPE }}" '.[] | select(.module == $valorexecution) | .active' "${{ env.KAOS_AUTOMATION_COMPLIANCE}}")
          # Evaluar el resultado
          echo "${{ needs.check-data.outputs.KAOS_EXECUTION_TYPE }}.yml"
          case $RESULT in
            "true")
              echo "El modulo ${{ needs.check-data.outputs.KAOS_EXECUTION_TYPE }} está activo y se puede ejecutar"
              # en esta parte de la ejecucion tenemos que tener en cuenta que podemos iniciar un workflow
              gh workflow run "${{ needs.check-data.outputs.KAOS_EXECUTION_TYPE }}.yml"
              RUN_ID=$(gh run list --workflow="${{ needs.check-data.outputs.KAOS_EXECUTION_TYPE }}.yml" --limit=1 --json databaseId --jq '.[0].databaseId')
              echo "El valor de RUN_ID=$RUN_ID"
              # echo "RUN_ID=$RUN_ID" >> $GITHUB_OUTPUT
              gh issue comment ${{ env.KAOS_ISSUE_NUMBER }} --body 'Se ha lanzado la ejecución de #${{ needs.check-data.outputs.KAOS_EXECUTION_TYPE }} con run_id: #$RUN_ID y con las variables {${{ needs.check-data.outputs.KAOS_EXECUTION_VARS }}}'
              ;;
            "false")
              gh issue comment ${{ env.KAOS_ISSUE_NUMBER }} --body 'El modulo ${{ needs.check-data.outputs.KAOS_EXECUTION_TYPE }} está inactivo y necesita autorización para su ejecución'
              ;;
            *)
              gh issue comment ${{ env.KAOS_ISSUE_NUMBER }} --body 'El módulo solicitado#${{ needs.check-data.outputs.KAOS_EXECUTION_TYPE }} no está definido"'
              ;;
          esac
  end-execution:
    runs-on: 
      group: execution
    needs: [start-execution]
    steps:
      - id: repo
        name: Checkout repository
        if: ${{ success() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: end
        name: End execution
        if: ${{ success() }}
        run: |
          echo "End execution"
          gh issue comment ${{ env.KAOS_ISSUE_NUMBER }} --body 'El resultado de la ejecución se añade a la tajeta #${{ env.KAOS_ISSUE_NUMBER }}, ha finalizado con el resultado SUCCESS.'        
  handle-success:
    runs-on: 
      group: execution
    needs: [end-execution]
    if: ${{ success() }}
    steps: 
      - id: repo
        name: Checkout repository
        if: ${{ success() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: handle-success-execution
        run: |
          # Si todo ha ido correcto añadimos el contenido del fichero 
          gh issue comment ${{ env.KAOS_ISSUE_NUMBER }} --body "El proceso ha finalizado correctamente ${{ env.KAOS_CODE }}. El resultado de la ejecución se guardará en MongoDB"
  handle_failure:
      runs-on: 
        group: execution
      needs: [job-repo, check-issue, check-data, show-data, start-execution, end-execution]
      if: ${{ failure() }} 
      steps: 
        - id: repo
          name: Checkout repository
          if: ${{ success() }}
          uses: actions/checkout@v4
          with:
            fetch-depth: 0
            token: ${{ secrets.KAOS_REPO_TOKEN }}
        - id: check-execution
          run: |
            echo "Error detected in process"
            echo "Created issue"
            gh issue create  --title "[Ka0S] Error detected in [Ka0s] Execution" --label "bug" --body "Error detected in ${{ env.KAOS_MODULE }}. Please check the logs for ${{ github.run_id }} more information of error."
            echo "Add comment to origin target"
            gh issue comment ${{ env.KAOS_ISSUE_NUMBER }} --body "El proceso no ha finalizado correctamente ${{ env.KAOS_CODE }}. El resultado está en el fichero ${{ env.KAOS_CODE }}.log"
  end-workflow:
    runs-on: 
      group: execution
    needs: [job-repo, check-issue, check-data, show-data, start-execution, end-execution, handle-success, handle_failure]
    if: ${{ always() }}
    steps:
      - id: repo
        name: Checkout repository
        if: ${{ success() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: end-process
        name: Finaliza el workflow
        run: |
          echo "End process"
          gh issue comment ${{ env.KAOS_ISSUE_NUMBER }} --body "Se finaliza Ka0s ${{ env.KAOS_CODE }}"
          gh workflow run inspector.yml --ref 'main' -f kaos-issue-id=$KAOS_ISSUE_NUMBER -f kaos-workflow-id="${{ env.KAOS_CODE }}" -f kaos-user-start=""
