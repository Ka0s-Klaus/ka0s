name: Generate FinOps Web Structure

on:
  push:
    branches:
      - 'master'
    paths:
      - 'core/config/finops/config/webs.json'
  workflow_dispatch:

env:
    KAOS_CODE: ${{ github.run_id }}
    KAOS_FINOPS_STRUCTURE: "core/results/webs/finops/"
    KAOS_FINOPS_RESULTS: "core/results/webs/finops/"  # <-- Variable añadida
    KAOS_FINOPS_JSON_WEB: "core/config/finops/config/webs.json"
    KAOS_FINOPS_TEMPLATE: "core/config/finops/template"
    KAOS_FINOPS_JS: "core/config/finops/js"
    KAOS_FINOPS_RESULTS_SECTION: "core/results/webs/finops/section"
    KAOS_REF_BRANCH: "master"

jobs:
  job-core:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm cache clean --force
          npm install fs-extra
          npm install handlebars

      - name: Generate HTML structure
        run: |
          mkdir -p "${{ env.KAOS_FINOPS_RESULTS_SECTION }}"
          node <<'EOF'
          const fs = require('fs');
          const path = require('path');
          const Handlebars = require('handlebars');

          // Generar página principal con thumbnails
          const config = require('./core/config/finops/config/webs.json');
          let mainPage = fs.readFileSync('./core/config/finops/template/index.template', 'utf8');
          
          // Generar thumbnails para cada sección
          const thumbnails = config.sections.map(s => 
            `<div class="thumbnail">
              <a href="section/${s.title}.html">
                <div class="thumbnail-icon"><i class="${s.icon}"></i></div>
                <div class="thumbnail-title">${s.title}</div>
              </a>
            </div>`
          ).join('');
          
          mainPage = mainPage.replace('{{thumbnails}}', thumbnails);
          
          fs.writeFileSync(path.join(process.env.GITHUB_WORKSPACE, '${{ env.KAOS_FINOPS_RESULTS }}', 'index.html'), mainPage);
          
          // Generar páginas de sección
          const websConfig = require(path.join(process.env.GITHUB_WORKSPACE, 'core/config/finops/config/webs.json'));
          const templatePath = path.join(process.env.GITHUB_WORKSPACE, 'core/config/finops/template', 'finops.html');
          const navbarPath = path.join(process.env.GITHUB_WORKSPACE, 'core/config/finops/template', 'navbar.html');
          
          // Reemplazar la generación del navbar
          const navbarTemplate = fs.readFileSync(path.join(process.env.GITHUB_WORKSPACE, 'core/config/finops/template/navbar.html'), 'utf8');
          const navbarCompiled = Handlebars.compile(navbarTemplate);
          const navbarHtml = navbarCompiled({ sections: config.sections });
          let navbarItems = '<ul id="navbar-sections" class="flex flex-col gap-1">';
          websConfig.sections.forEach(section => { 
            navbarItems += `<li> 
              <a href="section/${encodeURIComponent(section.title)}.html" 
                 class="nav-link flex items-center p-3 text-gray-700 hover:bg-blue-50 rounded-lg transition-all duration-200 group"> 
                <div class="flex items-center justify-center w-12"><i class="${section.icon} text-orange-300 group-hover:text-orange-500 text-xl"></i></div> 
                <span class="sidebar-text flex-1 font-medium capitalize">${section.title}</span> 
              </a> 
            </li>`; 
          });
          navbarItems += '</ul>';
          
          // Copiar archivos de visualización a las secciones
          websConfig.sections.forEach(section => { 
            const sourcePath = path.join(process.env.GITHUB_WORKSPACE, 'core/outputs/bq', section.place); 
            const destPath = path.join(process.env.GITHUB_WORKSPACE, 'core/results/webs/finops/section', `${section.title}.html`); 
            fs.copyFileSync(sourcePath, destPath);
            
            // Añadir botón de retorno
            let sectionContent = fs.readFileSync(destPath, 'utf8');
            const returnButton = `
            <div style="text-align: center; margin: 20px;">
              <a href="../index.html" style="display: inline-flex; align-items: center; padding: 10px 20px; background: #000; color: white; text-decoration: none; border-radius: 5px; gap: 10px;">
                <img src="https://masorange.es/wp-content/uploads/2024/05/kili-logo-dark-hug.svg" alt="masorange logo" style="height: 16px; filter: brightness(0) invert(1);">
                <span>Return</span>
              </a>
            </div>`;
            
            sectionContent = sectionContent.replace('</body>', `${returnButton}</body>`);
            fs.writeFileSync(destPath, sectionContent);
          });
          EOF
          echo "Parece que hemos terminado, comprobar el resultado"
      - name: Upload generated files
        run: |
          git config --global user.name "${{ secrets.KAOS_BOT_NAME }}"
          git config --global user.email "${{ secrets.KAOS_BOT_EMAIL }}"
          git pull
          git add "${{ env.KAOS_FINOPS_STRUCTURE }}*"
          if git diff --staged --quiet; then
            echo "No hay cambios para hacer commit"
          else
            git commit -m "[Ka0S] Generated FinOps web structure"
            git push origin ${{ github.ref }}
          fi


  handle-success:
    runs-on: self-hosted
    needs: [job-core]
    if: ${{ success() }}
    steps:
      - id: repo
        name: Checkout code
        if: ${{ always() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: handle-success-execution
        name: Run BigQuery Cost Analysis
        run: |
          echo "Handle Success execution ${{ env.KAOS_CODE }}"
         
      - id: end-handle
        name: Finaliza el workflow
        run: |
          echo "Handle Success please check ${{ env.KAOS_CODE }}"
        
  handle_failure:
      runs-on: self-hosted
      needs: [job-core, handle-success]
      if: ${{ failure() }} 
      steps:
        - id: repo
          name: Checkout code
          if: ${{ always() }}
          uses: actions/checkout@v4
          with:
            fetch-depth: 0
            token: ${{ secrets.KAOS_REPO_TOKEN }}
        - id: end-handle
          name: Finaliza el workflow
          run: |
            echo "Handle Failure please check ${{ env.KAOS_CODE }}"
  
  end-workflow:
      runs-on: self-hosted
      needs: [job-core, handle-success, handle_failure]
      if: ${{ always() && !contains(github.event.head_commit.message, '[Ka0S] ') }} 
      env:
          GH_TOKEN: ${{ secrets.KAOS_REPO_TOKEN }}
      steps:
        - id: repo
          name: Checkout code
          if: ${{ always() }}
          uses: actions/checkout@v4
          with:
            fetch-depth: 0
            token: ${{ secrets.KAOS_REPO_TOKEN }}
        - id: end-process
          name: Finaliza el workflow
          run: |
            echo "End process"
            echo "Se finaliza Ka0s ${{ env.KAOS_CODE }}"
            gh workflow run inspector.yml --ref ${{ env.KAOS_REF_BRANCH }} -f kaos-issue-id= -f kaos-workflow-id="${{ env.KAOS_CODE }}" -f kaos-user-start=""
      
