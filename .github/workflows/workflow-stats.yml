name: Ka0s Workflow Statistics Summary

on:
  workflow_dispatch:  # Allow manual trigger
  
permissions:
  contents: write
  actions: write
  issues: write
  
env:
    KAOS_CODE: ${{ github.run_id }}
    KAOS_EVENT_NAME: ${{ github.event_name }}
    KAOS_ACTION: ${{ github.action }}
    KAOS_REF: ${{ github.ref }}
    KAOS_MODULE: "[Ka0S] Workflow Statistics Summary"
    KAOS_PATH_RESUME: "audit/workflows/"
    KAOS_ACTOR: ${{ github.actor }}
    GH_REPO: "Ka0s-Klaus/ka0s"

jobs:
  job-core:
    runs-on:
      group: ka0s
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}

      - name: Commit and push changes
        run: |
          git config --global user.name "${{ secrets.KAOS_BOT_NAME }}"
          git config --global user.email "${{ secrets.KAOS_BOT_EMAIL }}"
          git pull

  job-stats:
    runs-on:
      group: ka0s
    needs: job-core
    env:
          GH_TOKEN: ${{ secrets.KAOS_REPO_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
  
      - name: Generate actually workflows names
        run: |
          # Pull the latest changes
          git config --global user.name "${{ secrets.KAOS_BOT_NAME }}"
          git config --global user.email "${{ secrets.KAOS_BOT_EMAIL }}"
          git pull
  
          # Created files of actually workflows
          echo "Created files of actually workflows"
          gh api \
            "/repos/${{ env.GH_REPO }}/actions/workflows?per_page=100" \
            --paginate \
            --jq '.workflows[] | {id, name, path, state}' \
            | tee ${KAOS_PATH_RESUME}actually-workflows.json \
            | jq -r -s '
              [
                "id",
                "name",
                "path",
                "state"
              ],
              (.[] | [
                .id // "",
                .name // "",
                .path // "",
                .state // ""
              ]) | @csv
            ' > ${KAOS_PATH_RESUME}actually-workflows.csv

      - name: Generate actually workflows executed up to the current extraction date
        run: |
          # Created files of workflows executed up to the current extraction date
          echo "Created files of workflows executed up to the current extraction date"
          # Create a temporary file for workflow runs
          touch ${{ env.KAOS_PATH_RESUME }}workflows-runs-${{ env.KAOS_CODE }}.json
            
          # Get workflows and process their runs
          workflows=$(jq -r '(.workflows // [])[].id' ${{ env.KAOS_PATH_RESUME }}actually-workflows.json)
          
          # Inicializar archivo principal con array vacío
          echo '[]' > ${{ env.KAOS_PATH_RESUME }}workflows-runs-${{ env.KAOS_CODE }}.json
          
          for workflow_id in $workflows; do
            # Obtener datos con manejo explícito de errores
            gh api -H "Accept: application/vnd.github+json" \
              /repos/${{ github.repository }}/actions/workflows/$workflow_id/runs \
              --paginate --jq '.workflow_runs' > raw_runs.json
            
            # Procesar con validación JSON
            if jq -e '.' raw_runs.json >/dev/null 2>&1; then
              jq -c 'map({
                id: .id,
                name: .name // "",
                head_branch: .head_branch // "",
                head_sha: .head_sha // "",
                run_number: .run_number // 0,
                event: .event // "",
                status: .status // "",
                conclusion: .conclusion // "",
                workflow_id: .workflow_id // "",
                url: .url // "",
                created_at: .created_at // "",
                updated_at: .updated_at // "",
                run_started_at: .run_started_at // ""
              })' raw_runs.json > processed_runs.json
              
              # Combinar resultados
              jq -s 'add | unique_by(.id)' \
                ${{ env.KAOS_PATH_RESUME }}workflows-runs-${{ env.KAOS_CODE }}.json \
                processed_runs.json > merged.json
                
              mv merged.json ${{ env.KAOS_PATH_RESUME }}workflows-runs-${{ env.KAOS_CODE }}.json
            else
              echo "Error: Invalid JSON response for workflow $workflow_id"
            fi
          done
          
          # Generar archivo final
          jq 'sort_by(.created_at | sub("\\D"; "-") | fromdateiso8601) | reverse' \
            ${{ env.KAOS_PATH_RESUME }}workflows-runs-${{ env.KAOS_CODE }}.json \
            > ${{ env.KAOS_PATH_RESUME }}actually-workflows-runs.json
          
          # Limpieza
          rm -f raw_runs.json processed_runs.json

      - name: Generate actually issues
        run: |
          gh api \
            "/repos/${{ env.GH_REPO }}/issues?state=all&filter=all&per_page=100" \
            --paginate \
            --jq '[.[] | select(.pull_request == null) | {
              assignees: ((.assignees // []) | map(.login) | join(";")),
              author: .user.login,
              body: (.body // ""),
              closed: (.state == "closed"),
              closedAt: (.closed_at // ""),
              comments: (.comments // 0),
              createdAt: .created_at,
              id,
              labels: ((.labels // []) | map(.name) | join(";")),
              milestone: (.milestone.title // ""),
              number,
              projectCards: ((.project_cards // []) | map(.url) | join(";")),
              projectItems: ((.project_items // []) | map(.url) | join(";")),
              reactionGroups: ((.reactions // {}) | to_entries | map("\(.key)=\(.value)") | join(";")),
              state,
              title,
              updatedAt: .updated_at,
              url: .html_url
            }]' \
            | tee ${KAOS_PATH_RESUME}issue-log-${KAOS_CODE}.json \
            | jq -r '
              (if type == "array" and length > 0 then
                [
                  "assignees",
                  "author",
                  "body",
                  "closed",
                  "closedAt",
                  "comments",
                  "createdAt",
                  "id",
                  "labels",
                  "milestone",
                  "number",
                  "projectCards",
                  "projectItems",
                  "reactionGroups",
                  "state",
                  "title",
                  "updatedAt",
                  "url"
                ],
                (.[] | [
                  .assignees,
                  .author,
                  .body,
                  .closed,
                  .closedAt,
                  .comments,
                  .createdAt,
                  .id,
                  .labels,
                  .milestone,
                  .number,
                  .projectCards,
                  .projectItems,
                  .reactionGroups,
                  .state,
                  .title,
                  .updatedAt,
                  .url
                ])
              else
                empty
              end) | @csv
            ' > ${KAOS_PATH_RESUME}actually-issue.csv

              echo "Formateamos el fichero de JSON"
              cat ${{ env.KAOS_PATH_RESUME }}issue-log-${{ env.KAOS_CODE }}.json | jq -s '.' > ${{ env.KAOS_PATH_RESUME }}actually-issue.json

      - name: Generated actually Pull Request
        run: |
          # Creamos el fichero de PR
          touch ${KAOS_PATH_RESUME}pr-log-${KAOS_CODE}.json

          # Extraemos toda la información de las PR hasta el momento
          echo "Extraemos toda la información de las PR hasta el momento"
          gh api \
            "/repos/${{ env.GH_REPO }}/pulls?state=all&per_page=100" \
            --paginate \
            --jq '[.[] | {
              additions,
              assignees: ((.assignees // []) | map(.login) | join(";")),
              author: (.user.login // ""),
              autoMergeRequest: (.auto_merge // false),
              baseRefName,
              body: (.body // ""),
              changedFiles,
              closed: (.state == "closed"),
              closedAt: (.closed_at // ""),
              comments: (.comments // 0),
              commits: (.commits // 0),
              createdAt,
              deletions,
              files: ((.files // []) | map(.filename) | join(";")),
              fullDatabaseId,
              headRefName,
              headRepository: (.head.repo.full_name // ""),
              headRepositoryOwner: (.head.repo.owner.login // ""),
              id,
              isCrossRepository: (.head.repo.id != .base.repo.id),
              isDraft,
              labels: ((.labels // []) | map(.name) | join(";")),
              latestReviews: ((.latest_reviews // []) | map(.state) | join(";")),
              maintainerCanModify,
              mergeCommit: (.merge_commit_sha // ""),
              mergeStateStatus,
              mergeable,
              mergedAt: (.merged_at // ""),
              mergedBy: (.merged_by.login // ""),
              milestone: (.milestone.title // ""),
              number,
              projectCards: ((.project_cards // []) | map(.url) | join(";")),
              projectItems: ((.project_items // []) | map(.url) | join(";")),
              reactionGroups: ((.reactions // {}) | to_entries | map("\(.key)=\(.value)") | join(";")),
              reviewDecision,
              reviewRequests: ((.review_requests // []) | map(.login) | join(";")),
              reviews: ((.reviews // []) | map(.state) | join(";")),
              state,
              statusCheckRollup: ((.status_check_rollup // []) | map(.context) | join(";")),
              title,
              updatedAt,
              url: .html_url
            }]' \
            | tee ${KAOS_PATH_RESUME}pr-log-${KAOS_CODE}.json \
            | jq -r '
              (if type == "array" and length > 0 then
                [
                  "additions",
                  "assignees",
                  "author",
                  "autoMergeRequest",
                  "baseRefName",
                  "body",
                  "changedFiles",
                  "closed",
                  "closedAt",
                  "comments",
                  "commits",
                  "createdAt",
                  "deletions",
                  "files",
                  "fullDatabaseId",
                  "headRefName",
                  "headRepository",
                  "headRepositoryOwner",
                  "id",
                  "isCrossRepository",
                  "isDraft",
                  "labels",
                  "latestReviews",
                  "maintainerCanModify",
                  "mergeCommit",
                  "mergeStateStatus",
                  "mergeable",
                  "mergedAt",
                  "mergedBy",
                  "milestone",
                  "number",
                  "projectCards",
                  "projectItems",
                  "reactionGroups",
                  "reviewDecision",
                  "reviewRequests",
                  "reviews",
                  "state",
                  "statusCheckRollup",
                  "title",
                  "updatedAt",
                  "url"
                ],
                (.[] | [
                  .additions,
                  .assignees,
                  .author,
                  .autoMergeRequest,
                  .baseRefName,
                  .body,
                  .changedFiles,
                  .closed,
                  .closedAt,
                  .comments,
                  .commits,
                  .createdAt,
                  .deletions,
                  .files,
                  .fullDatabaseId,
                  .headRefName,
                  .headRepository,
                  .headRepositoryOwner,
                  .id,
                  .isCrossRepository,
                  .isDraft,
                  .labels,
                  .latestReviews,
                  .maintainerCanModify,
                  .mergeCommit,
                  .mergeStateStatus,
                  .mergeable,
                  .mergedAt,
                  .mergedBy,
                  .milestone,
                  .number,
                  .projectCards,
                  .projectItems,
                  .reactionGroups,
                  .reviewDecision,
                  .reviewRequests,
                  .reviews,
                  .state,
                  .statusCheckRollup,
                  .title,
                  .updatedAt,
                  .url
                ])
              else
                empty
              end) | @csv
            ' > ${KAOS_PATH_RESUME}actually-pr.csv

          # Formatear JSON final
          cat ${KAOS_PATH_RESUME}pr-log-${KAOS_CODE}.json | jq -s '.' > ${KAOS_PATH_RESUME}actually-pr.json
          echo "Mostramos el contenido del fichero"
          #cat ${{ env.KAOS_PATH_RESUME }}actually-pr.json
          
      - name: Upload Files
        run: |
          echo "Downloading files to the repository..."
          git config --global user.name "${{ secrets.KAOS_BOT_NAME }}"
          git config --global user.email "${{ secrets.KAOS_BOT_EMAIL }}"
          git pull
          echo "Uploading files to the repository..."
          git add ${{ env.KAOS_PATH_RESUME }}*
          git commit -m "[Ka0S] Uploading resume workflows execution files to the repository..."
          git push origin ${{ github.ref }}

  handle-success:
    runs-on:
      group: ka0s
    needs: [job-core, job-stats]
    if: ${{ success() }}
    steps:
      - id: repo
        name: Checkout code
        if: ${{ always() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: handle-success-execution
        name: handle-success-execution
        env:
          GH_TOKEN: ${{ secrets.KAOS_REPO_TOKEN }}
        run: |
          # RNNUMBER=$(echo "${{ github.ref }}" | grep -o '[0-9]*')
          # gh issue comment $RNNUMBER --body "El proceso ha finalizado correctamente ${{ env.KAOS_CODE }}. El resultado está en el fichero core/results/event_data_${{ env.KAOS_CODE }}.log"
          echo "El proceso ha finalizado correctamente ${{ env.KAOS_CODE }}. El resultado está en el fichero core/results/event_data_${{ env.KAOS_CODE }}.log"

  handle_failure:
    runs-on:
      group: ka0s
    needs: [job-core, handle-success]
    if: ${{ failure() }}
    steps:
      - id: repo
        name: Checkout code
        if: ${{ always() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: handle-failure-execution
        name: handle-failure-execution
        env:
          GH_TOKEN: ${{ secrets.KAOS_REPO_TOKEN }}
        run: |
          echo "Error detected in process"
          # RNNUMBER=$(echo "${{ github.ref }}" | grep -o '[0-9]*')
          # gh issue comment $RNNUMBER --body "El proceso no ha finalizado correctamente ${{ env.KAOS_CODE }}. El resultado está en el fichero core/results/event_data${{ env.KAOS_CODE }}.log"
          # Creamos la issue dado que ha fallado el modulo principal
          gh issue create  --title "[Ka0S] Error detected in ${{ env.KAOS_MODULE }}" --body "Error detected in ${{ env.KAOS_MODULE }}. Please check the logs for ${{ github.run_id }} more information of error."
          
  end-workflow:
    runs-on:
      group: ka0s
    needs: [job-core, job-stats, handle-success, handle_failure]
    if: ${{ always() && !contains(github.event.head_commit.message, '[Ka0S] ') }}
    env:
        GH_TOKEN: ${{ secrets.KAOS_REPO_TOKEN }}
    steps:
      - id: repo
        name: Checkout code
        if: ${{ always() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: end-process
        name: Finaliza el workflow
        run: |
          echo "End process"
          # RNNUMBER=$(echo "${{ github.ref }}" | grep -o '[0-9]*')
          # gh issue comment $RNNUMBER --body "Se finaliza Ka0s ${{ env.KAOS_CODE }}"
          echo "Se finaliza Ka0s ${{ env.KAOS_CODE }}"
          gh workflow run inspector.yml --ref 'main' -f kaos-workflow-id="${{ env.KAOS_CODE }}" -f kaos-user-start=""
