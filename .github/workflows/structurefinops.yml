name: Ka0s Create structure for FinOps
on:
  push:
    branches:
      - 'H*'
      - 'F*'
      - 'RN*'
    paths:
      - 'core/config/finops/**'
  workflow_dispatch:
env:
    KAOS_CODE: ${{ github.run_id }}
    KAOS_EVENT_NAME: ${{ github.event_name }}
    KAOS_ACTION: ${{ github.action }}
    KAOS_REF: ${{ github.ref }}
    KAOS_MODULE: "[Ka0S] Deploy Web Structure"
    KAOS_JSON_RESUME: "core/outputs/webs/" # directorio que aloja los json de resultados de la operación 
    KAOS_WEB_STRUCTURE: "core/results/webs/" # directorio donde se alojan las diferentes estructura de webs
    KAOS_ACTOR: ${{ github.actor }}

    KAOS_FINOPS_STRUCTURE: "core/results/webs/finops/" # directorio para la estructura de finops - CORREGIDO
    KAOS_FINOPS_JSON_WEB: "core/config/finops/config/webs.json" # archivo JSON principal de finops
    KAOS_FINOPS_JSON_DATA: "core/config/finops/data" # directorio de datos JSON para finops
    KAOS_FINOPS_TEMPLATE: "core/config/finops/template/" # directorio de datos JSON para finops
    KAOS_FINOPS: "core/config/finops/" # directorio de la web
    KAOS_FINOPS_RESULTS_SECTION: "core/results/webs/finops/section"

jobs:
  job-core:
    runs-on:
      group: ka0s
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}

      - name: Crear archivos HTML para cada sección
        run: |
          # Leer el archivo de configuración de webs
          STRUCTURE_FILE="${{ env.KAOS_FINOPS_JSON_WEB }}"
          
          # Crear directorio para las secciones
          mkdir -p "${{ env.KAOS_FINOPS_RESULTS_SECTION }}"
          
          # Copiar la plantilla base de finops
          cp "core/config/finops/template/finops.html" "{{ env.KAOS_FINOPS_RESULTS_SECTION }}template.html"
          
          # Procesar cada sección del archivo webs.json
          jq -r '.sections[] | [.title, .datatemplate] | @tsv' "$STRUCTURE_FILE" | while IFS=$'\t' read -r section_title section_data; do
            echo "Generando HTML para sección: $section_title"
            
            # Leer la configuración de la sección
            SECTION_CONFIG="{{ env.KAOS_FINOPS }}config/section/$section_data"
            
            if [ -f "$SECTION_CONFIG" ]; then
              # Crear el archivo HTML para esta sección
              SECTION_HTML="{{ env.KAOS_FINOPS }}section/${section_title}.html"
              cp "{{ env.KAOS_FINOPS_TEMPLATE }}finops.html" "$SECTION_HTML"
              
              # Obtener descripción y título de la sección
              SECTION_DESCRIPTION=$(jq -r '.description' "$SECTION_CONFIG")
              
              # Reemplazar placeholders en el template
              sed -i "s/SECTION_TITLE_PLACEHOLDER/$section_title/g" "$SECTION_HTML"
              sed -i "s/SECTION_DESCRIPTION_PLACEHOLDER/$SECTION_DESCRIPTION/g" "$SECTION_HTML"
              
              echo "HTML generado para $section_title en $SECTION_HTML"
            else
              echo "Archivo de configuración no encontrado para $section_title"
            fi
          done


          
      - id: upload-files
        name: Upload Files
        run: |
          echo "Uploading files to the repository..."
          git config --global user.name "${{ secrets.KAOS_BOT_NAME }}"
          git config --global user.email "${{ secrets.KAOS_BOT_EMAIL }}"
          git pull
          # Asegurarse de que la carpeta web_structure se añade explicitamente (incluyendo finops)
          git add ${{ env.KAOS_WEB_STRUCTURE }}*
          git add ${{ env.KAOS_JSON_RESUME }}*
          # Verificar si hay cambios para hacer commit
          if git diff --staged --quiet; then
            echo "No hay cambios para hacer commit"
          else
            git commit -m "[Ka0S] Uploading resume execution files and finops structure to the repository..."
            git push origin ${{ env.KAOS_REF }}
          fi
          
  job-data:
    runs-on:
      group: ka0s
    needs: [job-core]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      
      - name: Copy data files to web structure
        run: |
          echo "Reading structure file..."
          STRUCTURE_FILE="${{ env.KAOS_FINOPS_JSON_WEB }}"
          echo "Structure file: $STRUCTURE_FILE"
          
          # Extract title for main folder name from structure file
          TITLE=$(jq -r '.title' $STRUCTURE_FILE)
          if [ -z "$TITLE" ]; then
            TITLE="dashboard"
            echo "Title not found in JSON file, using default: $TITLE"
          else
            echo "Main folder is named: $TITLE"
          fi
          
          # Sanitize the title for directory names
          SAFE_TITLE=$(echo "$TITLE" | sed 's/+/plus/g')
          
          # Create data directory if it doesn't exist
          mkdir -p "${{ env.KAOS_WEB_STRUCTURE }}$SAFE_TITLE/data"
          
          # Copiar el archivo webs.json a la estructura
          cp $STRUCTURE_FILE "core/results/webs/finops/data/webs.json"
          echo "Copied webs.json to data directory"
          
          # Copiar los archivos de datatemplate de las secciones
          echo "Copying section datatemplate files..."
          jq -r '.sections[] | .datatemplate' $STRUCTURE_FILE | while read datatemplate_path; do
            if [ ! -z "$datatemplate_path" ]; then
              # Obtener el nombre del archivo
              TEMPLATE_FILENAME=$(basename "$datatemplate_path")
              echo "Copying section datatemplate file: $datatemplate_path to data directory"
              cp "core/config/finops/results/data/$datatemplate_path" "${{ env.KAOS_WEB_STRUCTURE }}$TITLE/data/$TEMPLATE_FILENAME"
            fi
          done
          
          # Copiar archivos de FinOps
          echo "Copying FinOps data files..."
          if [ -d "${{ env.KAOS_FINOPS_JSON_DATA }}" ]; then
            find "${{ env.KAOS_FINOPS_JSON_DATA }}" -name "*.json" -type f | while read -r json_file; do
              DATA_FILENAME=$(basename "$json_file")
              echo "Copying FinOps data file: $json_file"
              cp "$json_file" "${{ env.KAOS_WEB_STRUCTURE }}$TITLE/data/$DATA_FILENAME"
            done
          fi
          
          # Create the directory before generating the summary
          mkdir -p "${{ env.KAOS_JSON_RESUME }}$SAFE_TITLE"
          
          # Generate data files summary using SAFE_TITLE
          echo "{" > "${{ env.KAOS_JSON_RESUME }}$SAFE_TITLE/data-files-summary.json"
          echo "  \"dataFiles\": [" >> "${{ env.KAOS_JSON_RESUME }}$SAFE_TITLE/data-files-summary.json"
          
          # List all copied files
          find "${{ env.KAOS_WEB_STRUCTURE }}$SAFE_TITLE/data" -type f | sort | while read -r file; do
            RELATIVE_PATH="${file#${{ env.KAOS_WEB_STRUCTURE }}$SAFE_TITLE/}"
            echo "    {\"path\": \"$RELATIVE_PATH\"}," >> "${{ env.KAOS_JSON_RESUME }}$SAFE_TITLE/data-files-summary.json"
          done
          
          # Remove the last comma and close the JSON
          sed -i '$ s/,$//' "${{ env.KAOS_JSON_RESUME }}$SAFE_TITLE/data-files-summary.json"
          echo "  ]" >> "${{ env.KAOS_JSON_RESUME }}$SAFE_TITLE/data-files-summary.json"
          echo "}" >> "${{ env.KAOS_JSON_RESUME }}$SAFE_TITLE/data-files-summary.json"
          
          echo "Data files summary generated at ${{ env.KAOS_JSON_RESUME }}$TITLE/data-files-summary.json"
      
      - id: copy-json   
        name: Copiar archivos JSON de config/webs a data
        run: |
          # Extraer título para el nombre de la carpeta principal desde el archivo de estructura
          STRUCTURE_FILE="${{ env.KAOS_JSON_WEB }}"
          TITLE=$(jq -r '.title' $STRUCTURE_FILE)
          if [ -z "$TITLE" ]; then
            TITLE="dashboard"
            echo "Título no encontrado en el archivo JSON, usando el valor predeterminado: $TITLE"
          else
            echo "La carpeta principal se llama: $TITLE"
          fi

          # NUEVO: Copiar también los archivos JSON de finops al directorio de finops
          echo "Copiando archivos JSON de core/config/finops a finops/data..."
          mkdir -p "core/results/webs/finops/data"
          
          # Copiar todos los archivos JSON de core/config/finops/data
          if [ -d "core/config/finops/data" ]; then
            find core/config/finops/data -name "*.json" -type f | while read -r json_file; do
              JSON_FILENAME=$(basename "$json_file")
              echo "Copiando archivo JSON de finops: $json_file a finops/data directory"
              cp "$json_file" "core/results/webs/finops/data/$JSON_FILENAME"
            done
          fi
          
          # Copiar también el webs.json principal de finops si existe
          if [ -f "${{ env.KAOS_FINOPS_JSON_WEB }}" ]; then
            echo "Copiando webs.json de finops..."
            cp "${{ env.KAOS_FINOPS_JSON_WEB }}" "core/results/webs/finops/data/webs.json"
          fi
          
          echo "Todos los archivos JSON de finops copiados exitosamente!"

      - id: upload-files
        name: Upload Files
        run: |
          echo "Uploading data files to the repository..."
          git config --global user.name "${{ secrets.KAOS_BOT_NAME }}"
          git config --global user.email "${{ secrets.KAOS_BOT_EMAIL }}"
          git pull
          # Add the data files and summary (incluyendo finops)
          git add ${{ env.KAOS_WEB_STRUCTURE }}**/data/*
          git add ${{ env.KAOS_JSON_RESUME }}*
          # Verify if there are changes to commit
          if git diff --staged --quiet; then
            echo "No hay cambios para hacer commit"
          else
            git commit -m "[Ka0S] Uploading data files to web structure..."
            git push origin ${{ env.KAOS_REF }}
          fi
      
  job-design:
    runs-on:
      group: ka0s
    needs: [job-core, job-data]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      
      - name: Preparar directorios y copiar archivos estáticos
        run: |
          # Configuración inicial
          STRUCTURE_FILE="${{ env.KAOS_JSON_WEB }}"
          TITLE=$(cat $STRUCTURE_FILE | jq -r '.title')
          
          # NUEVO: Asegurar que los directorios de finops existen
          mkdir -p "core/results/webs/finops/js"
          mkdir -p "core/results/webs/finops/templates"
          
          # NUEVO: Copiar plantillas específicas de finops si existen
          if [ -d "core/config/finops/results/templates" ]; then
            find core/config/finops/results/templates -type f -name "*.html" | while read -r template_file; do
              TEMPLATE_FILENAME=$(basename "$template_file")
              echo "Copiar plantilla de finops: $template_file a finops/templates directory"
              cp "$template_file" "core/results/webs/finops/templates/$TEMPLATE_FILENAME"
            done
            echo "Todas las plantillas HTML de finops copiadas exitosamente!"
          fi
          
          # Copiar archivos JS para finops
          if [ -d "core/config/finops/webs/js" ]; then
            find core/config/finops/webs/js -type f -name "*.js" | while read -r js_file; do
              JS_FILENAME=$(basename "$js_file")
              echo "Copiando archivo JS de finops: $js_file"
              cp "$js_file" "core/results/webs/finops/js/$JS_FILENAME"
            done
            echo "Archivos JS copiados a finops exitosamente!"
          fi
          
          # Hacer pull con estrategia de recursión para manejar conflictos
          git pull --strategy-option=theirs


      - name: Guardar cambios en el repositorio
        run: |
          # Añadir todos los archivos generados (incluyendo finops)
          git add "core/results/webs/"
          
          # Verificar si hay cambios para hacer commit
          if git diff --staged --quiet; then
            echo "No hay cambios para hacer commit"
          else
            git commit -m "[Ka0S] Actualizando archivos de estructura web y finops"
            git push origin ${{ env.KAOS_REF }}
          fi

      
          
  handle-success:
    runs-on:
      group: ka0s
    needs: [job-core, job-data, job-design]
    if: ${{ success() }}
    steps:
      - id: repo
        name: Checkout code
        if: ${{ always() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: handle-success-execution
        name: handle-success-execution
        env:
          GH_TOKEN: ${{ secrets.KAOS_REPO_TOKEN }}
        run: |
          # RNNUMBER=$(echo "${{ github.ref }}" | grep -o '[0-9]*')
          # gh issue comment $RNNUMBER --body "El proceso ha finalizado correctamente ${{ env.KAOS_CODE }}. El resultado está en el fichero core/results/event_data_${{ env.KAOS_CODE }}.log"
          echo "El proceso ha finalizado correctamente ${{ env.KAOS_CODE }}. El resultado está en el fichero core/results/event_data_${{ env.KAOS_CODE }}.log"

  handle_failure:
    runs-on:
      group: ka0s
    needs: [job-core, job-data, job-design, handle-success]
    if: ${{ failure() }}
    steps:
      - id: repo
        name: Checkout code
        if: ${{ always() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: handle-failure-execution
        name: handle-failure-execution
        env:
          GH_TOKEN: ${{ secrets.KAOS_REPO_TOKEN }}
        run: |
          echo "Error detected in process"
          # RNNUMBER=$(echo "${{ github.ref }}" | grep -o '[0-9]*')
          # gh issue comment $RNNUMBER --body "El proceso no ha finalizado correctamente ${{ env.KAOS_CODE }}. El resultado está en el fichero core/results/event_data${{ env.KAOS_CODE }}.log"
          # Creamos la issue dado que ha fallado el modulo principal
          gh issue create  --title "[Ka0S] Error detected in ${{ env.KAOS_MODULE }}" --body "Error detected in ${{ env.KAOS_MODULE }}. Please check the logs for ${{ github.run_id }} more information of error."
          

  end-workflow:
    runs-on:
      group: ka0s
    needs: [job-core, job-data, job-design, handle-success, handle_failure]
    if: ${{ always() && !contains(github.event.head_commit.message, '[Ka0S] ') }}
    env:
        GH_TOKEN: ${{ secrets.KAOS_REPO_TOKEN }}
    steps:
      - id: repo
        name: Checkout code
        if: ${{ always() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: end-process
        name: Finaliza el workflow
        run: |
          echo "End process"
          # RNNUMBER=$(echo "${{ github.ref }}" | grep -o '[0-9]*')
          # gh issue comment $RNNUMBER --body "Se finaliza Ka0s ${{ env.KAOS_CODE }}"
          echo "Se finaliza Ka0s ${{ env.KAOS_CODE }}"
          gh workflow run inspector.yml --ref 'main' -f kaos-issue-id=$RNNUMBER -f kaos-workflow-id="${{ env.KAOS_CODE }}" -f kaos-user-start=""