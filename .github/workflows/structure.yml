name: Ka0s Create structure for dashboard
on:
  push:
    branches:
      - 'H*'
      - 'F*'
      - 'RN*'
    paths:
      - 'core/config/webs/**'
  workflow_dispatch:
env:
    KAOS_CODE: ${{ github.run_id }}
    KAOS_EVENT_NAME: ${{ github.event_name }}
    KAOS_ACTION: ${{ github.action }}
    KAOS_REF: ${{ github.ref }}
    KAOS_MODULE: "[Ka0S] Deploy Web Structure"
    KAOS_JSON_WEB: "core/config/webs/webs.json"
    KAOS_JSON_RESUME: "core/outputs/webs/" # directorio que aloja los json de resultados de la operación 
    KAOS_JSON_DATA: "core/web/data/data.json" # directorio que aloja los json de datos de la operación
    KAOS_WEB_STRUCTURE: "core/results/webs/" # directorio donde se alojan las diferentes estructura de webs
    KAOS_ACTOR: ${{ github.actor }}
jobs:
  job-core:
    runs-on:
      group: ka0s
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      
      - name: Copy web folder structure
        run: |
          # Tenemos que añadir al proceso que sea capaz de leer + de un json de creación de webs
          # si web esta creada la actualiza, sino la crea desde cero

          # Read the structure.json file to get folder names
          echo "0 - Reading structure.json file..."
          STRUCTURE_FILE="${{ env.KAOS_JSON_WEB }}"
          
          # Extract title for main folder name
          TITLE=$(cat $STRUCTURE_FILE | grep -o '"title": *"[^"]*"' | cut -d'"' -f4)
          echo "I - Main folder will be named: $TITLE"

          # Create main directory
          mkdir -p "${{ env.KAOS_WEB_STRUCTURE }}$TITLE"
          touch ${{ env.KAOS_WEB_STRUCTURE }}$TITLE/$TITLE".html"
          mkdir -p "${{ env.KAOS_JSON_RESUME }}$TITLE"
          touch ${{ env.KAOS_JSON_RESUME }}$TITLE/readme.txt

          # Copy the directory structure (without files)
          find core/web -type d | while read dir; do
            if [ "$dir" != "core/web" ]; then
              # Remove core/web prefix from directory path
              clean_dir=${dir#core/web/}
              echo "II - Created directory: $clean_dir"
              target_dir="${{ env.KAOS_WEB_STRUCTURE }}$TITLE/$clean_dir"
              mkdir -p "$target_dir"
              touch $target_dir/$clean_dir".html"
              echo "II - Created directory: $target_dir"
            fi
          done

          # Extract section names and create subfolders
          cat $STRUCTURE_FILE | grep -o '"section[^"]*": *"[^"]*"' | while read -r section; do
            SECTION_NAME=$(echo $section | cut -d'"' -f4)
            echo "III - Creating subfolder: $SECTION_NAME"
            mkdir -p "${{ env.KAOS_WEB_STRUCTURE }}$TITLE/structure/$SECTION_NAME"
            touch ${{ env.KAOS_WEB_STRUCTURE }}$TITLE/structure/$SECTION_NAME/$SECTION_NAME".html"
          done
          
          # Create a JSON file with the structure information
          echo "[" > ${{ env.KAOS_JSON_RESUME }}$TITLE/$TITLE"_resume.json"
          # Find all files and directories
          find ${{ env.KAOS_WEB_STRUCTURE }} -type f -o -type d | sort | while read path; do
            if [ "$path" != "${{ env.KAOS_WEB_STRUCTURE }}" ]; then
              # Get the type (file or directory)
              if [ -d "$path" ]; then
                TYPE="directory"
              else
                TYPE="file"
              fi
              # Get the name of the item (last part of path)
              NAME=$(basename "$path")
              # Create the JSON entry
              echo "  {\"path\": \"$path\", \"name\": \"$NAME\", \"type\": \"$TYPE\"}," >> ${{ env.KAOS_JSON_RESUME }}$TITLE/$TITLE"_resume.json"
            fi
          done
          # Remove the last comma and close the JSON array
          sed -i '$ s/,$//' ${{ env.KAOS_JSON_RESUME }}$TITLE/$TITLE"_resume.json"
          echo "]" >> ${{ env.KAOS_JSON_RESUME }}$TITLE/$TITLE"_resume.json"
          echo "IV - Web folder structure copied successfully!"

      - id: upload-files
        name: Upload Files
        run: |
          echo "Uploading files to the repository..."
          git config --global user.name "${{ secrets.KAOS_BOT_NAME }}"
          git config --global user.email "${{ secrets.KAOS_BOT_EMAIL }}"
          git pull
          # Asegurarse de que la carpeta web_structure se añade explicitamente
          git add ${{ env.KAOS_WEB_STRUCTURE }}*
          git add ${{ env.KAOS_JSON_RESUME }}*
          # Verificar si hay cambios para hacer commit
          if git diff --staged --quiet; then
            echo "No hay cambios para hacer commit"
          else
            git commit -m "[Ka0S] Uploading resume execution files and web structure to the repository..."
            git push origin ${{ env.KAOS_REF }}
          fi
  job-data:
    runs-on:
      group: ka0s
    needs: [job-core]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      
      - name: Copy data files to web structure
        run: |
          echo "Reading data.json file..."
          DATA_FILE="${{ env.KAOS_JSON_DATA }}"
          echo "Data file: $DATA_FILE"
          
          # Extract title for main folder name from structure file
          STRUCTURE_FILE="${{ env.KAOS_JSON_WEB }}"
          TITLE=$(cat $STRUCTURE_FILE | grep -o '"title": *"[^"]*"' | cut -d'"' -f4)
          if [ -z "$TITLE" ]; then
            TITLE="dashboard"
            echo "Title not found in JSON file, using default: $TITLE"
          else
            echo "Main folder is named: $TITLE"
          fi
          
          # Create data directory if it doesn't exist
          mkdir -p "${{ env.KAOS_WEB_STRUCTURE }}$TITLE/data"
          
          # Read data.json and copy files
          if [ -f "$DATA_FILE" ]; then
            echo "Processing data files from data.json..."
            
            # Extract source and destination paths
            jq -c '.dataFiles[]' "$DATA_FILE" | while read -r file; do
              SOURCE=$(echo $file | jq -r '.source')
              DEST=$(echo $file | jq -r '.destination')
              echo "Source: $SOURCE"
              echo "Destination: $DEST"

              # Ensure destination directory exists
              DEST_DIR=$(dirname "${{ env.KAOS_WEB_STRUCTURE }}$TITLE/$DEST")
              mkdir -p "$DEST_DIR"
              echo "Destination directory: $DEST_DIR"
              
              # Copy the file
              if [ -f "$SOURCE" ]; then
                echo "Copying $SOURCE to ${{ env.KAOS_WEB_STRUCTURE }}$TITLE/$DEST"
                cp "$SOURCE" "${{ env.KAOS_WEB_STRUCTURE }}$TITLE/$DEST"
              else
                echo "Warning: Source file $SOURCE not found"
              fi
            done
            
            echo "Data files copied successfully!"
          else
            echo "Warning: data.json file not found at $DATA_FILE"
          fi
          
          # Generate a summary of copied files
          echo "Generating data files summary..."
          echo "{" > "${{ env.KAOS_JSON_RESUME }}$TITLE/data-files-summary.json"
          echo "  \"generated_at\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"," >> "${{ env.KAOS_JSON_RESUME }}$TITLE/data-files-summary.json"
          echo "  \"title\": \"$TITLE\"," >> "${{ env.KAOS_JSON_RESUME }}$TITLE/data-files-summary.json"
          echo "  \"files\": [" >> "${{ env.KAOS_JSON_RESUME }}$TITLE/data-files-summary.json"
          
          # List all copied files
          find "${{ env.KAOS_WEB_STRUCTURE }}$TITLE/data" -type f | sort | while read -r file; do
            RELATIVE_PATH="${file#${{ env.KAOS_WEB_STRUCTURE }}$TITLE/}"
            echo "    {\"path\": \"$RELATIVE_PATH\"}," >> "${{ env.KAOS_JSON_RESUME }}$TITLE/data-files-summary.json"
          done
          
          # Remove the last comma and close the JSON
          sed -i '$ s/,$//' "core/outputs/webs/data-files-summary.json"
          echo "  ]" >> "core/outputs/webs/data-files-summary.json"
          echo "}" >> "core/outputs/webs/data-files-summary.json"
          
          echo "Data files summary generated at core/outputs/webs/data-files-summary.json"

      - id: upload-files
        name: Upload Files
        run: |
          echo "Uploading data files to the repository..."
          git config --global user.name "${{ secrets.KAOS_BOT_NAME }}"
          git config --global user.email "${{ secrets.KAOS_BOT_EMAIL }}"
          git pull
          # Add the data files and summary
          git add core/results/webs/**/data/*
          git add core/outputs/webs/data-files-summary.json
          # Verify if there are changes to commit
          if git diff --staged --quiet; then
            echo "No hay cambios para hacer commit"
          else
            git commit -m "[Ka0S] Uploading data files to web structure..."
            git push origin ${{ env.KAOS_REF }}
          fi
  job-design:
    runs-on:
      group: ka0s
    needs: [job-core, job-data]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
  
      - name: Copiar scripts JS a dashboard/js
        run: |
          mkdir -p core/results/webs/dashboard/js
          cp core/web/js/data-list.js core/results/webs/dashboard/js/data-list.js
          cp core/web/js/graphic.js core/results/webs/dashboard/js/graphic.js
      - name: Generar HTML de secciones según JSON
        run: |
          echo "Generando HTML de secciones según su JSON..."
          STRUCTURE_FILE="core/config/webs/webs.json"
          TITLE=$(cat $STRUCTURE_FILE | grep -o '"title": *"[^"]*"' | cut -d'"' -f4)
          SECTIONS=$(cat $STRUCTURE_FILE | grep -o '"section[0-9]*": *"[^"]*"' | cut -d'"' -f2,4 | tr '\n' ' ')
          for entry in $SECTIONS; do
            SECTION_KEY=$(echo $entry | cut -d':' -f1 | tr -d '"')
            SECTION_NAME=$(echo $entry | cut -d':' -f2 | tr -d '"')
            SECTION_JSON="core/config/webs/${SECTION_NAME}.json"
            SECTION_HTML="core/results/webs/${TITLE}/structure/${SECTION_NAME}/${SECTION_NAME}.html"
            if [ -f "$SECTION_JSON" ]; then
              echo "Procesando $SECTION_JSON para $SECTION_HTML"
              # Extraer título de la sección
              SECTION_TITLE=$(jq -r '.title' "$SECTION_JSON")
              
              # Leer la plantilla HTML
              TEMPLATE_HTML="core/web/templates/section-template.html"
              if [ -f "$TEMPLATE_HTML" ]; then
                # Copiar la plantilla al destino
                mkdir -p "$(dirname "$SECTION_HTML")"
                cp "$TEMPLATE_HTML" "$SECTION_HTML"
                
                # Reemplazar los placeholders con los valores reales
                sed -i "s/SECTION_TITLE_PLACEHOLDER/$SECTION_TITLE/g" "$SECTION_HTML"
                
                # Comprobar si hay un placeholder para lista de sección y procesarlo
                if grep -q "SECTION_LIST_PLACEHOLDER" "$SECTION_HTML"; then
                  echo "Encontrado placeholder para lista de sección, procesando..."
                  # Verificar si el JSON de la sección tiene una lista en sus templates
                  if jq -e '.templates[] | select(.type == "list")' "$SECTION_JSON" > /dev/null; then
                    # Obtener el primer template de tipo list (usando head -1 en lugar de first)
                    LIST_TEMPLATE_JSON=$(jq -c '.templates[] | select(.type == "list")' "$SECTION_JSON" | head -1)
                    echo "LIST_TEMPLATE_JSON: $LIST_TEMPLATE_JSON"
                    LIST_TITLE=$(echo "$LIST_TEMPLATE_JSON" | jq -r '.title')
                    echo "LIST_TITLE: $LIST_TITLE"
                    LIST_DATA_SOURCE=$(echo "$LIST_TEMPLATE_JSON" | jq -r '.dataSource')
                    echo "LIST_DATA_SOURCE: $LIST_DATA_SOURCE"
                    
                    # Leer la plantilla de lista
                    LIST_TEMPLATE=$(cat core/web/templates/data-list.html)
                    echo "LIST_TEMPLATE: $LIST_TEMPLATE"
                    
                    # Crear un archivo temporal con la plantilla de lista modificada
                    TEMP_LIST=$(mktemp)
                    cat core/web/templates/data-list.html | 
                      sed "s|{{TEMPLATE_TITLE}}|$LIST_TITLE|g" | 
                      sed "s|{{DATA_SOURCE}}|$LIST_DATA_SOURCE|g" > "$TEMP_LIST"
                    
                    # Crear un archivo temporal para el resultado final
                    TEMP_RESULT=$(mktemp)
                    
                    # Usar awk para reemplazar el placeholder con el contenido del archivo temporal
                    awk -v placeholder="SECTION_LIST_PLACEHOLDER" -v replacement="$(cat $TEMP_LIST)" '{
                      gsub(placeholder, replacement)
                      print
                    }' "$SECTION_HTML" > "$TEMP_RESULT"
                    
                    # Mover el resultado al archivo final
                    mv "$TEMP_RESULT" "$SECTION_HTML"
                    
                    # Limpiar archivos temporales
                    rm -f "$TEMP_LIST"
                    
                    echo "Añadido componente de lista a la sección"
                  else
                    echo "La sección no tiene una lista definida, eliminando placeholder"
                    sed -i "s|SECTION_LIST_PLACEHOLDER||g" "$SECTION_HTML"
                  fi
                fi
                
                # Procesar templates y reemplazar el placeholder de templates
                TEMPLATES_HTML=""
                jq -c '.templates[]' "$SECTION_JSON" | while read -r template; do
                  TYPE=$(echo $template | jq -r '.type')
                  TITLE=$(echo $template | jq -r '.title')
                  DATA_SOURCE=$(echo $template | jq -r '.dataSource')
                  
                  if [ "$TYPE" = "graphic" ]; then
                    # Leer la plantilla de gráfico
                    GRAPHIC_TEMPLATE=$(cat core/web/templates/graphic.html)
                    # Reemplazar placeholders en la plantilla
                    GRAPHIC_TEMPLATE=$(echo "$GRAPHIC_TEMPLATE" | sed "s/GRAPHIC_TITLE_PLACEHOLDER/$TITLE/g")
                    GRAPHIC_TEMPLATE=$(echo "$GRAPHIC_TEMPLATE" | sed "s|DATA_SOURCE_PLACEHOLDER|$DATA_SOURCE|g")
                    TEMPLATES_HTML+="$GRAPHIC_TEMPLATE"
                    TEMPLATES_HTML+="<script src=\"../../js/graphic.js\" data-source=\"$DATA_SOURCE\"></script>"
                  elif [ "$TYPE" = "list" ]; then
                    # Leer la plantilla de lista
                    LIST_TEMPLATE=$(cat core/web/templates/data-list.html)
                    # Reemplazar placeholders en la plantilla
                    LIST_TEMPLATE=$(echo "$LIST_TEMPLATE" | sed "s/LIST_TITLE_PLACEHOLDER/$TITLE/g")
                    LIST_TEMPLATE=$(echo "$LIST_TEMPLATE" | sed "s|DATA_SOURCE_PLACEHOLDER|$DATA_SOURCE|g")
                    TEMPLATES_HTML+="$LIST_TEMPLATE"
                    TEMPLATES_HTML+="<script src=\"../../js/data-list.js\" data-source=\"$DATA_SOURCE\"></script>"
                  fi
                done
                
                # Reemplazar el placeholder de templates con el HTML generado
                awk -v r="$TEMPLATES_HTML" '{gsub("<!-- TEMPLATES_PLACEHOLDER -->", r)} 1' "$SECTION_HTML" > temp && mv temp "$SECTION_HTML"
                
                echo "Generado $SECTION_HTML"
                # Almacenar cada sección en un directorio temporal para concatenarlas después
                mkdir -p "core/results/webs/${TITLE}/temp_sections"
                cp "$SECTION_HTML" "core/results/webs/${TITLE}/temp_sections/${SECTION_NAME}.html"
              else
                echo "Error: No se encontro la plantilla HTML en $TEMPLATE_HTML"
              fi
            else
              echo "No se encontró $SECTION_JSON"
            fi
          done
          
          # Crear el dashboard.html con todas las secciones concatenadas
          echo "<!DOCTYPE html>
          <html lang=\"es\">
          <head>
              <meta charset=\"UTF-8\">
              <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
              <title>Ka0s Dashboard - ${TITLE}</title>
              <script src=\"https://cdn.tailwindcss.com\"></script>
              <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js\"></script>
              <link rel=\"stylesheet\" href=\"css/dashboard.css\">
          </head>
          <body class=\"bg-gray-50\">
              <div class=\"container mx-auto px-4 py-8\">
                  <header class=\"py-3 mb-4 border-b border-gray-200\">
                      <div class=\"flex items-center\">
                          <h1 class=\"text-2xl font-bold text-gray-800\">${TITLE}</h1>
                      </div>
                  </header>
                  <div class=\"dashboard-content\">" > "core/results/webs/${TITLE}/dashboard.html"
                  
                  # Concatenar todas las secciones
                  if [ -d "core/results/webs/${TITLE}/temp_sections" ]; then
                    for section_file in "core/results/webs/${TITLE}/temp_sections"/*.html; do
                      SECTION_NAME=$(basename "$section_file" .html)
                      echo "<div class=\"section-content\" id=\"${SECTION_NAME}\">" >> "core/results/webs/${TITLE}/dashboard.html"
                      
                      # Extraer solo el contenido del body de cada sección usando cut
                      # Primero guardamos el contenido en un archivo temporal
                      TEMP_CONTENT=$(mktemp)
                      awk '/<body/,/<\/body>/' "$section_file" > "$TEMP_CONTENT"
                      
                      # Usamos cut para extraer solo las partes relevantes
                      # Eliminamos las etiquetas body y scripts innecesarios
                      cat "$TEMP_CONTENT" | 
                        grep -v "<body" | 
                        grep -v "</body>" | 
                        grep -v "<script src=\"..\/js\/data-list.js\">" |
                        grep -v "<script src=\" \`https:\/\/cdn.tailwindcss.com\` \">" |
                        grep -v "<script src=\" \`https:\/\/cdn.jsdelivr.net\/npm\/bootstrap@5.2.3\/dist\/js\/bootstrap.bundle.min.js\` \">" >> "core/results/webs/${TITLE}/dashboard.html"
                      
                      # Limpiamos el archivo temporal
                      rm "$TEMP_CONTENT"
                      
                      echo "</div>" >> "core/results/webs/${TITLE}/dashboard.html"
                    done
                    
                    # Añadir componente de lista directamente
                    echo "<div class=\"data-list-component my-8\">" >> "core/results/webs/${TITLE}/dashboard.html"
                    echo "<h2 class=\"text-xl font-semibold text-gray-800 mb-4\">Datos del Sistema</h2>" >> "core/results/webs/${TITLE}/dashboard.html"
                    
                    # Extraer el componente de lista de data-list.html usando cut
                    if [ -f "core/web/templates/data-list.html" ]; then
                      # Extraer la parte principal del componente de lista
                      LIST_CONTENT=$(mktemp)
                      awk '/<div class="my-6">/,/<div id="pagination"/' "core/web/templates/data-list.html" > "$LIST_CONTENT"
                      
                      # Reemplazar los placeholders con valores reales
                      sed -i "s/{{TEMPLATE_TITLE}}/Listado de Workflows/g" "$LIST_CONTENT"
                      sed -i "s|{{DATA_SOURCE}}|data/kaos-workflows-available.json|g" "$LIST_CONTENT"
                      
                      # Añadir al dashboard
                      cat "$LIST_CONTENT" >> "core/results/webs/${TITLE}/dashboard.html"
                      rm "$LIST_CONTENT"
                      
                      # Añadir el componente de paginación
                      echo "<div id=\"pagination\" class=\"flex justify-center my-6\">" >> "core/results/webs/${TITLE}/dashboard.html"
                      echo "  <!-- La paginación se generará dinámicamente -->" >> "core/results/webs/${TITLE}/dashboard.html"
                      echo "</div>" >> "core/results/webs/${TITLE}/dashboard.html"
                    else
                      echo "Advertencia: No se encontró el archivo data-list.html"
                    fi
                    
                    echo "</div>" >> "core/results/webs/${TITLE}/dashboard.html"
                  fi
                  
                  # Agregar scripts comunes al final
                  echo "        </div>
              </div>
              <script src=\"js/dashboard.js\"></script>
              <script src=\"js/data-list.js\"></script>
              <script>
                document.addEventListener('DOMContentLoaded', function() {
                  // Inicializar componentes
                  console.log('Dashboard cargado correctamente');
                });
              </script>
          </body>
          </html>" >> "core/results/webs/${TITLE}/dashboard.html"
          
          echo "Dashboard HTML generado correctamente en core/results/webs/${TITLE}/dashboard.html"

      - id: upload-files
        name: Upload Files
        run: |
          echo "Uploading HTML files to the repository..."
          git config --global user.name "${{ secrets.KAOS_BOT_NAME }}"
          git config --global user.email "${{ secrets.KAOS_BOT_EMAIL }}"
          # Añadir los archivos JS al commit
          git add core/results/webs/dashboard/js/data-list.js
          git add core/results/webs/dashboard/js/graphic.js
          # Primero, guardar los archivos no rastreados que queremos conservar
          echo "Verificando archivos no rastreados..."
          if [ -f "core/results/webs/dashboard/dashboard.html" ]; then
            echo "Respaldando dashboard.html antes del pull..."
            mkdir -p /tmp/backup
            cp core/results/webs/dashboard/dashboard.html /tmp/backup/
          fi
          
          # Hacer pull con estrategia de recursión para manejar conflictos
          git pull
          
          # Restaurar archivos respaldados si existen
          if [ -d "/tmp/backup" ] && [ -f "/tmp/backup/dashboard.html" ]; then
            echo "Restaurando dashboard.html después del pull..."
            cp /tmp/backup/dashboard.html core/results/webs/dashboard/dashboard.html
          fi
          
          # Add the HTML files
          git add core/results/webs/**/*.html
          # Verify if there are changes to commit
          if git diff --staged --quiet; then
            echo "No hay cambios para hacer commit"
          else
            git commit -m "[Ka0S] Uploading HTML files to web structure..."
            git push origin ${{ env.KAOS_REF }}
          fi
  handle-success:
    runs-on:
      group: ka0s
    needs: [job-core, job-data, job-design]
    if: ${{ success() }}
    steps:
      - id: repo
        name: Checkout code
        if: ${{ always() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: handle-success-execution
        name: handle-success-execution
        env:
          GH_TOKEN: ${{ secrets.KAOS_REPO_TOKEN }}
        run: |
          # Si todo ha ido correcto añadimos el contenido del fichero
          # RNNUMBER=$(echo "${{ github.ref }}" | grep -o '[0-9]*')
          RNNUMBER=220
          gh issue comment $RNNUMBER --body "El proceso ha finalizado correctamente ${{ env.KAOS_CODE }}. El resultado está en el fichero core/results/event_data${{ env.KAOS_CODE }}.log"
  
  handle_failure:
    runs-on:
      group: ka0s
    needs: [job-core, job-data, job-design, handle-success]
    if: ${{ failure() }}
    steps:
      - id: repo
        name: Checkout code
        if: ${{ always() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: handle-failure-execution
        name: handle-failure-execution
        env:
          GH_TOKEN: ${{ secrets.KAOS_REPO_TOKEN }}
        run: |
          echo "Error detected in process"
          # RNNUMBER=$(echo "${{ github.ref }}" | grep -o '[0-9]*')
          RNNUMBER=220
          gh issue comment $RNNUMBER --body "El proceso no ha finalizado correctamente ${{ env.KAOS_CODE }}. El resultado está en el fichero core/results/event_data${{ env.KAOS_CODE }}.log"
          
      - id: revert-changes
        name: Revert changes made by workflow
        run: |
          echo "Reverting changes made by the workflow..."
          
          # Extract title to know which folders to remove
          STRUCTURE_FILE="${{ env.KAOS_JSON_WEB }}"
          if [ -f "$STRUCTURE_FILE" ]; then
            TITLE=$(cat $STRUCTURE_FILE | grep -o '"title": *"[^"]*"' | cut -d'"' -f4)
            if [ -z "$TITLE" ]; then
              TITLE="dashboard"
              echo "Title not found in JSON file, using default: $TITLE"
            else
              echo "Reverting changes for: $TITLE"
            fi
            
            # Remove created directories and files
            if [ -d "${{ env.KAOS_WEB_STRUCTURE }}$TITLE" ]; then
              echo "Removing web structure directory: ${{ env.KAOS_WEB_STRUCTURE }}$TITLE"
              rm -rf "${{ env.KAOS_WEB_STRUCTURE }}$TITLE"
            fi
            
            if [ -d "${{ env.KAOS_JSON_RESUME }}$TITLE" ]; then
              echo "Removing resume directory: ${{ env.KAOS_JSON_RESUME }}$TITLE"
              rm -rf "${{ env.KAOS_JSON_RESUME }}$TITLE"
            fi
            
            # Commit the removal
            git config --global user.name "${{ secrets.KAOS_BOT_NAME }}"
            git config --global user.email "${{ secrets.KAOS_BOT_EMAIL }}"
            git pull
            git add "${{ env.KAOS_WEB_STRUCTURE }}"
            git add "${{ env.KAOS_JSON_RESUME }}"
            
            # Check if there are changes to commit
            if git diff --staged --quiet; then
              echo "No changes to revert"
            else
              git commit -m "[Ka0S] Reverting changes due to workflow failure"
              git push origin ${{ env.KAOS_REF }}
              echo "Changes successfully reverted"
            fi
          else
            echo "Structure file not found, cannot determine what to revert"
          fi
  end-workflow:
    runs-on:
      group: ka0s
    needs: [job-core, job-data, job-design, handle-success, handle_failure]
    if: ${{ always() && !contains(github.event.head_commit.message, '[Ka0S] ') }}
    env:
        GH_TOKEN: ${{ secrets.KAOS_ACTIONS_TOKEN }}
    steps:
      - id: repo
        name: Checkout code
        if: ${{ always() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: end-process
        name: Finaliza el workflow
        run: |
          echo "End process"
          # RNNUMBER=$(echo "${{ github.ref }}" | grep -o '[0-9]*')
          RNNUMBER=220
          gh issue comment $RNNUMBER --body "Se finaliza Ka0s ${{ env.KAOS_CODE }}"
          gh workflow run inspector.yml --ref 'main' -f kaos-issue-id=$RNNUMBER -f kaos-workflow-id="${{ env.KAOS_CODE }}" -f kaos-user-start=""
