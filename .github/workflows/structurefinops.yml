name: Ka0s Create structure for FinOps
on:
  push:
    branches:
      - 'H*'
      - 'F*'
      - 'RN*'
    paths:
      - 'core/config/finops/**'
  workflow_dispatch:
env:
    KAOS_CODE: ${{ github.run_id }}
    KAOS_EVENT_NAME: ${{ github.event_name }}
    KAOS_ACTION: ${{ github.action }}
    KAOS_REF: ${{ github.ref }}
    KAOS_MODULE: "[Ka0S] Deploy Web Structure"
    KAOS_JSON_RESUME: "core/outputs/webs/" # directorio que aloja los json de resultados de la operación 
    KAOS_WEB_STRUCTURE: "core/results/webs/" # directorio donde se alojan las diferentes estructura de webs
    KAOS_ACTOR: ${{ github.actor }}

    KAOS_FINOPS_STRUCTURE: "core/results/webs/finops/" # directorio para la estructura de finops - CORREGIDO
    KAOS_FINOPS_JSON_WEB: "core/config/finops/config/webs.json" # archivo JSON principal de finops
    KAOS_FINOPS_JSON_DATA: "core/config/finops/data" # directorio de datos JSON para finops
    KAOS_FINOPS_TEMPLATE: "core/config/finops/template" # directorio de datos JSON para finops
    KAOS_FINOPS: "core/config/finops" # directorio de la web
    KAOS_FINOPS_RESULTS_SECTION: "core/results/webs/finops/section"

    KAOS_DATA_BQ: "core/results/bq/data"

jobs:
  job-core:
    runs-on:
      group: ka0s
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}

      - name: Crear estructura FinOps HTML
        run: |
          STRUCTURE_FILE="${{ env.KAOS_FINOPS_JSON_WEB }}"
          TEMPLATE_FILE="${{ env.KAOS_FINOPS_TEMPLATE }}/finops.html"
          NAVBAR_BASE="${{ env.KAOS_FINOPS_TEMPLATE }}/navbar.html"
          mkdir -p "${{ env.KAOS_FINOPS_RESULTS_SECTION }}"

          echo "Construyendo items del navbar global..."
          NAVBAR_ITEMS="<ul id=\"navbar-sections\" class=\"flex flex-col gap-1\">"
          NAVBAR_ITEMS+="<div class=\"sections-container p-4\">"

          while IFS=$'\t' read -r title icon; do
            anchor=$(echo "$title" | jq -sRr @uri)
            NAVBAR_ITEMS+="<li>"
            NAVBAR_ITEMS+="<a href=\"${title}.html\" class=\"nav-link flex items-center p-3 text-gray-700 hover:bg-blue-50 rounded-lg transition-all duration-200 group\">"
            NAVBAR_ITEMS+="<div class=\"flex items-center justify-center w-12\"><i class=\"${icon} text-orange-300 group-hover:text-orange-500 text-xl\"></i></div>"
            NAVBAR_ITEMS+="<span class=\"sidebar-text flex-1 font-medium capitalize\">${title}</span>"
            NAVBAR_ITEMS+="</a></li>"
          done < <(jq -r '.sections[] | [.title, .icon] | @tsv' "$STRUCTURE_FILE")

          NAVBAR_ITEMS+="</div></ul>"

          if [ ! -s "$NAVBAR_BASE" ]; then
            echo "❌ ERROR: El archivo navbar base '$NAVBAR_BASE' no existe o está vacío."
            exit 1
          fi

          NAVBAR_HTML=$(<"$NAVBAR_BASE")

          # Comprobar existencia de placeholders (corregido)
          if [[ "$NAVBAR_HTML" != *"SECTION_TITLE_PLACEHOLDER"* ]] || [[ "$NAVBAR_HTML" != *"<!-- NAVBAR_SECTIONS_PLACEHOLDER -->"* ]]; then
            echo "⚠️ WARNING: El archivo '$NAVBAR_BASE' no contiene los placeholders esperados."
            cat "$NAVBAR_BASE"
            exit 1
          fi

          NAVBAR_HTML="${NAVBAR_HTML//SECTION_TITLE_PLACEHOLDER/FinOps}"
          NAVBAR_HTML="${NAVBAR_HTML//<!-- NAVBAR_SECTIONS_PLACEHOLDER -->/$NAVBAR_ITEMS}"

          echo "$NAVBAR_HTML" > full_navbar.html

          echo "Procesando secciones..."
          jq -c '.sections[]' "$STRUCTURE_FILE" | while read -r section; do
            section_title=$(echo "$section" | jq -r '.title')
            section_description=$(echo "$section" | jq -r '.description // empty')
            section_data_template=$(echo "$section" | jq -r '.datatemplate')
            section_icon=$(echo "$section" | jq -r '.icon')

            SECTION_CONFIG="${{ env.KAOS_FINOPS }}/config/$section_data_template"
            SECTION_HTML="${{ env.KAOS_FINOPS_RESULTS_SECTION }}/${section_title}.html"

            if [ -f "$SECTION_CONFIG" ]; then
              echo "✅ Generando sección: $section_title"

              cp "$TEMPLATE_FILE" "$SECTION_HTML"

              sed -i "s/SECTION_TITLE_PLACEHOLDER/$section_title/g" "$SECTION_HTML"
              sed -i "s/SECTION_DESCRIPTION_PLACEHOLDER/$section_description/g" "$SECTION_HTML"
              sed -i -e '/<div id="navbar-container"><\/div>/{r full_navbar.html' -e 'd}' "$SECTION_HTML"

              CONTENT=""

              # Procesar templates de la sección
              while read -r template; do
                tmpl_type=$(echo "$template" | jq -r '.type')

                case "$tmpl_type" in
                  "cost-chart")
                    title=$(echo "$template" | jq -r '.title // "Sin título"')
                    tipo=$(echo "$template" | jq -r '.tipo // "bar"')
                    # Normalizar tipo a minúsculas y solo tipo de Chart.js válido
                    tipo_lc=$(echo "$tipo" | tr '[:upper:]' '[:lower:]')

                    case "$tipo_lc" in
                      bar|line|pie|doughnut|radar|polararea)
                        tipo="$tipo_lc"
                        ;;
                      barchart|stackedbarchart)
                        tipo="bar"
                        ;;
                      *)
                        echo "⚠️ Tipo de gráfico inválido '$tipo', usando 'bar' por defecto"
                        tipo="bar"
                        ;;
                    esac

                    dataSource=$(echo "$template" | jq -r '.dataSource')
                    realCostField=$(echo "$template" | jq -r '.realCostField // "final_cost"')
                    estimatedCostField=$(echo "$template" | jq -r '.estimatedCostField // "total_cost"')
                    groupBy=$(echo "$template" | jq -r '.groupBy')
                    orderBy=$(echo "$template" | jq -r '.orderBy')
                    orderDirection=$(echo "$template" | jq -r '.orderDirection')
                    limit=$(echo "$template" | jq -r '.limit')
                    currentYear=$(echo "$template" | jq -r '.currentYear // false')

                    DATA_JSON_PATH="${{ env.KAOS_DATA_BQ }}/$(basename "$dataSource")"

                    if [ ! -f "$DATA_JSON_PATH" ]; then
                      echo "❌ No existe data source $DATA_JSON_PATH para $title"
                      continue
                    fi

                    # Filtrar por año actual si está configurado
                    if [ "$currentYear" = "true" ]; then
                      CURRENT_YEAR=$(date +%Y)
                      FILTERED_DATA=$(jq --arg year "$CURRENT_YEAR" '[ .[] | select(.month | startswith($year)) ]' "$DATA_JSON_PATH")
                    else
                      FILTERED_DATA=$(cat "$DATA_JSON_PATH")
                    fi

                    # Construir filtros jq para ordenar, limitar y agrupar
                    SORTED=$(echo "$FILTERED_DATA" | jq -c --arg orderBy "$orderBy" --arg orderDir "$orderDirection" --argjson limit "$limit" '
                      sort_by(.[$orderBy]) | if $orderDir=="desc" then reverse else . end | .[0:$limit]
                    ')

                    # Obtener etiquetas (labels) agrupadas por groupBy
                    labels=$(echo "$SORTED" | jq -r --arg groupBy "$groupBy" 'map(.[ $groupBy ]) | unique | @json')

                    # Calcular totales usando operaciones aritméticas de bash
                    totalReal=$(echo "$SORTED" | jq -r --arg field "$realCostField" 'map(.[$field] | tonumber) | add')
                    totalEstimated=$(echo "$SORTED" | jq -r --arg field "$estimatedCostField" 'map(.[$field] | tonumber) | add')
                    # Usar aritmética de bash en lugar de bc
                    netCost=$(awk "BEGIN {print $totalReal - $totalEstimated}")

                    # Formatear valores para la visualización usando awk en lugar de bc
                    format_value() {
                      local value=$1
                      if (( $(awk "BEGIN {print ($value >= 1000000)}") )); then
                        printf "€%.2fM" $(awk "BEGIN {print $value/1000000}")
                      elif (( $(awk "BEGIN {print ($value >= 1000)}") )); then
                        printf "€%.1fk" $(awk "BEGIN {print $value/1000}")
                      else
                        printf "€%.2f" $value
                      fi
                    }

                    # Calcular comparación y estilo usando awk
                    if [ "$totalEstimated" != "0" ]; then
                      diff=$(awk "BEGIN {print $totalReal - $totalEstimated}")
                      percent=$(awk "BEGIN {print ($diff / $totalEstimated) * 100}")
                      if (( $(awk "BEGIN {print ($diff >= 0)}") )); then
                        comparison_text="↑ ${percent}% sobre estimado"
                        comparison_class="text-base text-red-500"
                      else
                        percent=$(awk "BEGIN {print -1 * $percent}")
                        comparison_text="↓ ${percent}% bajo estimado"
                        comparison_class="text-base text-green-500"
                      fi
                    else
                      comparison_text="Sin estimación"
                      comparison_class="text-base text-gray-500"
                    fi

                    # Obtener datos reales y estimados ordenados y limitados
                    realCosts=$(echo "$SORTED" | jq -r --arg field "$realCostField" 'map(.[ $field ]) | @json')
                    estimatedCosts=$(echo "$SORTED" | jq -r --arg field "$estimatedCostField" 'map(.[ $field ]) | @json')

                    safe_title=$(echo "$title" | tr '[:upper:]' '[:lower:]' | tr ' ' '_' | tr -cd '[:alnum:]_')
                    chart_id="chart_${safe_title:-untitled}"

                    # Generar HTML con el resumen y el gráfico
                    CONTENT+="<section class=\"cost-chart p-4 bg-white rounded shadow mb-6\">"
                    CONTENT+="<h3 class=\"text-xl font-semibold mb-2\">$title</h3>"
                    CONTENT+="<div style=\"height: 100px\">"
                    CONTENT+="<canvas id=\"$chart_id\"></canvas>"
                    CONTENT+="</div>"
                    CONTENT+="<script>"
                    CONTENT+="(function(){"
                    CONTENT+="  let ctx = document.getElementById('$chart_id').getContext('2d');"
                    CONTENT+="  new Chart(ctx, {"
                    CONTENT+="    type: '$tipo',"
                    CONTENT+="    data: {"
                    CONTENT+="      labels: $labels,"
                    CONTENT+="      datasets: ["
                    
                    # Leer las métricas del template si existen
                    metrics=$(echo "$template" | jq -r '.metrics // empty')
                    if [ ! -z "$metrics" ]; then
                      first=true
                      while read -r metric; do
                        field=$(echo "$metric" | jq -r '.field')
                        label=$(echo "$metric" | jq -r '.label')
                        type=$(echo "$metric" | jq -r '.type')
                        
                        if [ "$first" = true ]; then
                          first=false
                        else
                          CONTENT+=","
                        fi
                        
                        data=$(echo "$SORTED" | jq -r --arg field "$field" 'map(.[$field] | select(. != null) | tonumber // 0) | @json')
                        
                        if [ "$type" = "line" ]; then
                          CONTENT+="{label:'$label', data:$data, type:'line', borderColor:'rgba(66, 133, 244, 1)', borderWidth:2, fill:false}"
                        else
                          CONTENT+="{label:'$label', data:$data, type:'bar', backgroundColor:'rgba(66, 133, 244, 0.8)', borderWidth:0, borderRadius:4}"
                        fi
                      done < <(echo "$metrics" | jq -c '.[]')
                    else
                      # Mantener el comportamiento anterior para compatibilidad
                      if [ "$estimatedCosts" != "[]" ]; then
                        CONTENT+="{label:'Coste Estimado', data:$estimatedCosts, backgroundColor:'rgba(255, 209, 141, 0.8)', borderColor:'rgba(234, 67, 53, 1)', borderWidth:0, borderRadius:4, order:2}"
                        if [ "$realCosts" != "[]" ]; then
                          CONTENT+=","
                        fi
                      fi
                      if [ "$realCosts" != "[]" ]; then
                        CONTENT+="{label:'Coste Real', data:$realCosts, backgroundColor:'rgba(66, 133, 244, 0.8)', borderColor:'rgba(66, 133, 244, 1)', borderWidth:0, borderRadius:4, order:1}"
                      fi
                    fi
                    CONTENT+="      ]"
                    CONTENT+="    },"
                    CONTENT+="    options: {"
                    CONTENT+="      responsive: true,"
                    CONTENT+="      maintainAspectRatio: true,"
                    CONTENT+="      scales: {"
                    CONTENT+="        x: { grid: { display: false } },"
                    CONTENT+="        y: {"
                    CONTENT+="          beginAtZero: true,"
                    CONTENT+="          grid: { color: 'rgba(0, 0, 0, 0.1)' }"
                    CONTENT+="        }"
                    CONTENT+="      },"
                    CONTENT+="      plugins: { legend: { display: true } }"
                    CONTENT+="    }"
                    CONTENT+="  });"
                    CONTENT+="})();"
                    CONTENT+="</script></section>"
                    ;;

                  "table")
                    title=$(echo "$template" | jq -r '.title')
                    CONTENT+="<section class=\"table-section p-4 bg-white rounded shadow mb-6\">"
                    CONTENT+="<h3 class=\"text-xl font-semibold mb-2\">$title</h3>"
                    CONTENT+="<table class=\"min-w-full border border-gray-300\">"
                    CONTENT+="<thead><tr><th class=\"border px-4 py-2\">Columna 1</th><th class=\"border px-4 py-2\">Columna 2</th></tr></thead>"
                    CONTENT+="<tbody>"
                    CONTENT+="<tr><td class=\"border px-4 py-2\">Dato 1</td><td class=\"border px-4 py-2\">Dato 2</td></tr>"
                    CONTENT+="<tr><td class=\"border px-4 py-2\">Dato 3</td><td class=\"border px-4 py-2\">Dato 4</td></tr>"
                    CONTENT+="</tbody></table></section>"
                    ;;

                  *)
                    CONTENT+="<p>Tipo de plantilla '$tmpl_type' no soportado.</p>"
                    ;;
                esac
              done < <(jq -c '.templates[]' "$SECTION_CONFIG")

              sed -i "/<!-- Plantillas -->/r /dev/stdin" "$SECTION_HTML" <<< "$CONTENT"

            else
              echo "⚠️ No se encontró configuración para '$section_title'"
            fi
          done

      - id: upload-files
        name: Upload Files
        run: |
          echo "Uploading files to the repository..."
          git config --global user.name "${{ secrets.KAOS_BOT_NAME }}"
          git config --global user.email "${{ secrets.KAOS_BOT_EMAIL }}"
          git pull
          # Asegurarse de que la carpeta web_structure se añade explicitamente (incluyendo finops)
          git add ${{ env.KAOS_WEB_STRUCTURE }}*
          git add ${{ env.KAOS_JSON_RESUME }}*
          # Verificar si hay cambios para hacer commit
          if git diff --staged --quiet; then
            echo "No hay cambios para hacer commit"
          else
            git commit -m "[Ka0S] Uploading resume execution files and finops structure to the repository..."
            git push origin ${{ env.KAOS_REF }}
          fi

  handle-success:
    runs-on:
      group: ka0s
    needs: [job-core]
    if: ${{ success() }}
    steps:
      - id: repo
        name: Checkout code
        if: ${{ always() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: handle-success-execution
        name: handle-success-execution
        env:
          GH_TOKEN: ${{ secrets.KAOS_REPO_TOKEN }}
        run: |
          # RNNUMBER=$(echo "${{ github.ref }}" | grep -o '[0-9]*')
          # gh issue comment $RNNUMBER --body "El proceso ha finalizado correctamente ${{ env.KAOS_CODE }}. El resultado está en el fichero core/results/event_data_${{ env.KAOS_CODE }}.log"
          echo "El proceso ha finalizado correctamente ${{ env.KAOS_CODE }}. El resultado está en el fichero core/results/event_data_${{ env.KAOS_CODE }}.log"

  handle_failure:
    runs-on:
      group: ka0s
    needs: [job-core, handle-success]
    if: ${{ failure() }}
    steps:
      - id: repo
        name: Checkout code
        if: ${{ always() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: handle-failure-execution
        name: handle-failure-execution
        env:
          GH_TOKEN: ${{ secrets.KAOS_REPO_TOKEN }}
        run: |
          echo "Error detected in process"
          # RNNUMBER=$(echo "${{ github.ref }}" | grep -o '[0-9]*')
          # gh issue comment $RNNUMBER --body "El proceso no ha finalizado correctamente ${{ env.KAOS_CODE }}. El resultado está en el fichero core/results/event${{ env.KAOS_CODE }}.log"
          # Creamos la issue dado que ha fallado el modulo principal
          gh issue create  --title "[Ka0S] Error detected in ${{ env.KAOS_MODULE }}" --body "Error detected in ${{ env.KAOS_MODULE }}. Please check the logs for ${{ github.run_id }} more information of error."
          

  end-workflow:
    runs-on:
      group: ka0s
    needs: [job-core, handle-success, handle_failure]
    if: ${{ always() && !contains(github.event.head_commit.message, '[Ka0S] ') }}
    env:
        GH_TOKEN: ${{ secrets.KAOS_REPO_TOKEN }}
    steps:
      - id: repo
        name: Checkout code
        if: ${{ always() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: end-process
        name: Finaliza el workflow
        run: |
          echo "End process"
          # RNNUMBER=$(echo "${{ github.ref }}" | grep -o '[0-9]*')
          # gh issue comment $RNNUMBER --body "Se finaliza Ka0s ${{ env.KAOS_CODE }}"
          echo "Se finaliza Ka0s ${{ env.KAOS_CODE }}"
          gh workflow run inspector.yml --ref 'main' -f kaos-issue-id=$RNNUMBER -f kaos-workflow-id="${{ env.KAOS_CODE }}" -f kaos-user-start=""