name: Ka0s 
on: 
  push:
    paths:
      - '**.yaml'
      - '**.yml'
      - '**.json'
      - '**.md'
    branches:
      - 'H*'
      - 'F*'
      - 'RN*'
env:
    KAOS_CODE: ${{ github.run_id }}
    KAOS_EVENT_NAME: ${{ github.event_name }}
    KAOS_ACTION: ${{ github.action }}
    KAOS_REF: ${{ github.ref }}
    KAOS_MODULE: "[Ka0S] kaos"
    KAOS_PATH_RESUME: "core/results/"
    KAOS_JSON: "core/results/event_data"
jobs: 
  job-core:
    runs-on: ubuntu-latest
    #  group: ka0s
    env:
      GITHUB_OUTPUT: ""
    if: ${{ !contains(github.event.head_commit.message, '[Ka0S] ') }} 
    steps:
      - id: repo
        name: Checkout code
        if: ${{ always() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: validate
        name: Validate file extensions
        env:
          GH_TOKEN: ${{ secrets.KAOS_REPO_TOKEN }}
        run: |
          IFS=' ' read -r -a extensions <<< "${{ secrets.KAOS_CORE_FILES }}"
          for file in $(git diff --name-only HEAD~1 HEAD); do
            extension="${file##*.}"
            if [[ ! " ${extensions[@]} " =~ " ${extension} " ]]; then
              echo "File $file has an invalid extension: $extension"
            fi
          done
          RNNUMBER=$(echo "${{ github.ref_name }}" | grep -o '[0-9]*')
          gh issue comment $RNNUMBER --body "Se inicia Ka0s ${{ env.KAOS_CODE }} "
      - name: Crear JSON
        id: crear_json
        run: |
          echo "{}" >> ${{ env.KAOS_JSON }}${{ github.run_id }}.json
          case "${{ env.KAOS_EVENT_NAME }}" in
            "push")
              echo "{\"event\": \"push\", \"ref\": \"${{ github.ref }}\", \"sha\": \"${{ github.sha }}\"}" >> ${{ env.KAOS_JSON }}${{ github.run_id }}.json # Ejemplo: {"event": "push", "ref": "refs/heads/main", "sha": "abc123"}
              echo "Variable github.action=${{ github.action }}" >> ${{ env.KAOS_JSON }}${{ github.run_id }}.json
              echo "Variable github.event.action=${{ github.event.action }}"
              echo "Variable github.event.pusher.name=${{ github.event.pusher.name }}" >> ${{ env.KAOS_JSON }}${{ github.run_id }}.json
              echo "variable github.event.pusher.email=${{ github.event.pusher.email }}" >> ${{ env.KAOS_JSON }}${{ github.run_id }}.json
              echo "Variable github.event.issue.number=${{ github.event.issue.number }}" >> ${{ env.KAOS_JSON }}${{ github.run_id }}.json
              #Crear un fichero de resumen con todos los datos de los commits asociados, esta información es usada en todo el ciclo de vida del workflow
              git log ${{ github.event.before }}..${{ github.sha }} --pretty=format:'%H%n%an%n%ae%n%ad%n%s' > ${{ env.KAOS_PATH_RESUME }}commit-summary-$KAOS_CODE_FILES.txt
              # Crear un fichero con la ruta completa y el nombre ficheros implicados en el commit
              git diff --name-only ${{ github.event.before }} ${{ github.sha }} > ${{ env.KAOS_PATH_RESUME }}files-in-commit-$KAOS_CODE_FILES.txt
              INVOLVED=${{ env.KAOS_PATH_RESUME }}files-in-commit-$KAOS_CODE_FILES.txt
              #echo "INVOLVED=$INVOLVED" >> $GITHUB_OUTPUT
              echo "INVOLVED=$INVOLVED" >> ${{ env.KAOS_JSON }}${{ github.run_id }}.json
              ;;
            "pull_request")
              echo "{\"event\": \"pull_request\", \"action\": \"${{ github.event.action }}\", \"number\": \"${{ github.event.number }}\"}" > event_data.json # Ejemplo: {"event": "pull_request", "action": "opened", "number": "42"}
              ;;
            "issues")
              echo "{\"event\": \"issues\", \"action\": \"${{ github.event.action }}\", \"issue\": \"${{ github.event.issue.number }}\"}" > event_data.json # Ejemplo: {"event": "issues", "action": "opened", "issue": "99"}
              ;;
            "issue_comment")
              echo "{\"event\": \"issue_comment\", \"action\": \"${{ github.event.action }}\", \"comment\": \"${{ github.event.comment.id }}\"}" > event_data.json # Ejemplo: {"event": "issue_comment", "action": "created", "comment": "123456"}
              ;;
            "create")
              echo "{\"event\": \"create\", \"ref\": \"${{ github.ref }}\", \"ref_type\": \"${{ github.event.ref }}\"}" > event_data.json # Ejemplo: {"event": "create", "ref": "refs/tags/v1.0", "ref_type": "tag"}
              ;;
            "delete")
              echo "{\"event\": \"delete\", \"ref\": \"${{ github.ref }}\", \"ref_type\": \"${{ github.event.ref }}\"}" > event_data.json # Ejemplo: {"event": "delete", "ref": "refs/heads/feature-branch", "ref_type": "branch"}
              ;;
            "release")
              echo "{\"event\": \"release\", \"action\": \"${{ github.event.action }}\", \"release\": \"${{ github.event.release.tag_name }}\"}" > event_data.json # Ejemplo: {"event": "release", "action": "published", "release": "v1.0"}
              ;;
            "watch")
              echo "{\"event\": \"watch\", \"action\": \"${{ github.event.action }}\"}" > event_data.json # Ejemplo: {"event": "watch", "action": "started"}
              ;;
            "repository_dispatch")
              echo "{\"event\": \"repository_dispatch\", \"action\": \"${{ github.event.action }}\"}" > event_data.json # Ejemplo: {"event": "repository_dispatch", "action": "custom-event"}
              ;;
            "workflow_dispatch")
              echo "{\"event\": \"workflow_dispatch\"}" > event_data.json # Ejemplo: {"event": "workflow_dispatch"}
              ;;
            *)
              echo "{\"event\": \"unknown\"}" > event_data.json # Ejemplo: {"event": "unknown"}
              ;;
          esac      
      - name: Set environment variable for ref
        id: ref
        run: echo "GITHUB_REF=${{ github.ref }}" >> $GITHUB_ENV
      - id: upload-files
        name: Upload Files
        run: |
          echo "Uploading files to the repository..."
          git config --global user.name "${{ secrets.KAOS_BOT_NAME }}"
          git config --global user.email "${{ secrets.KAOS_BOT_EMAIL }}"
          git pull
          git add ${{ env.KAOS_JSON }}*
          git commit -m "[Ka0S] Uploading resume execution files to the repository..."
          git push origin ${{ github.ref }}
          git push origin $GITHUB_REF
      - id: view
        name: Ver JSON
        #run: cat event_data.json
        run: cat ${{ env.KAOS_JSON }}${{ github.run_id }}.json      
      - id: module
        env:
            modules: ${{ secrets.KAOS_CORE_MODULES }}
            files: ${{ secrets.KAOS_CORE_FILES }}
        run: |
          # Nuevo proceso de activacion de los modulos
          while IFS= read -r line; do
            echo "I Leemos el fichero ${{ github.event.inputs.kaos-involved-file }} y extraemos el fichero $line"
            module_failed=0
            extension_failed=0
            file_name=$(basename "$line")
            echo "I-1 Calculamos el nombre del fichero $file_name"
            file_extension="${file_name##*.}"
            echo "I-2 Calculamos la extension del fichero $file_extension"
            file_module="$file_extension""lint.yaml"
            echo "I-3 Calculamos el modulo $file_module"
            IFS=',' read -r -a file_array <<< "$files"
            for file in "${file_array[@]}"; do
              echo "II Leemos el array de $file"
              if [[ "$file_extension" == "$file" ]]; then
                echo "III Comprobamos si $file_extension es igual a $file"
                IFS=',' read -r -a module_array <<< "$modules"
                for module in "${module_array[@]}"; do
                  echo "IV Leemos el array $module"
                  if [[ "$file_module" == *"$module"* ]]; then
                    echo "V Comprobamos que el $file_module es igual a $module y ejecutamos el flujo"
                    # Si hemos llegado hasta aquí ejecutamos el módulo
                    # Añadimos los valores a las variables de la issue
                    KAOS_ISSUE_BODY="${{ env.KAOS_MODULE }} has been initiated and Launch workflow $file_module to check file $line"
                    # Añadimos el comentario a la issue
                    #gh workflow run issue.yaml --ref ${{ github.ref }} -f kaos-issue-body="$KAOS_ISSUE_BODY" -f kaos-issue-id=${{ github.event.inputs.kaos-issue-id }} -f kaos-issue-actions=comment
                    # Lanzamos el lint del fichero
                    #gh workflow run $file_module --ref ${{ github.ref }} -f kaos-origin=${{ github.run_id }} -f kaos-files=$line -f kaos-issue-id=${{ github.event.inputs.kaos-issue-id }} -f kaos-user-start=${{ github.event.inputs.kaos-user-start }}
                    module_failed=0
                    extension_failed=0
                    break
                  else
                    # Control de si existe el modulo para esa extension"
                    echo "VI No es igual $file_module a $module y lo indicamos en la variable module_failed=1"
                    module_failed=1
                  fi
                done
                break
              else
                # Control de si existe el modulo para esa extension"
                echo "VII No es igual $file_extension a $file y lo indicamos en la variable extension_failed=1"
                extension_failed=1
              fi  
            done
            if [[ $module_failed == 1 ]]; then
              echo "IX Si el modulo falla ($module_failed) añadimos el comentario a la issue"
              # Si hemos llegado hasta aquí añadimos el mensaje de que la extension esta permitida pero no dispone de modulo activo y aqui finaliza el proceso
              # Añadimos los valores a las variables de la issue
              KAOS_ISSUE_BODY="${{ env.KAOS_MODULE }} ha detectado que la extensión ($file_extension) esta permitida dentro de KAOS_CORE_FILES, pero el módulo asociado ($file_module) no esta activo. Por favor compruebe que exista y esta activo."
              # Añadimos el comentario a la issue
              #gh workflow run issue.yaml --ref ${{ github.ref }} -f kaos-issue-body="$KAOS_ISSUE_BODY" -f kaos-issue-id=${{ github.event.inputs.kaos-issue-id }} -f kaos-issue-actions=comment
            fi
            if [[ $extension_failed == 1 ]]; then
              echo "X Si extension falla falla ($extension_failed) añadimos el comentario a la issue"
              # Si hemos llegado hasta aquí añadimos el mensaje de que la extension no esta permitida
              # Añadimos los valores a las variables de la issue
              KAOS_ISSUE_BODY="${{ env.KAOS_MODULE }} ha detectado que la extensión ($file_extension) NO esta permitida dentro de KAOS_CORE_FILES. Por favor compruebe que exista y esta activo."
              # Añadimos el comentario a la issue
              #gh workflow run issue.yaml --ref ${{ github.ref }} -f kaos-issue-body="$KAOS_ISSUE_BODY" -f kaos-issue-id=${{ github.event.inputs.kaos-issue-id }} -f kaos-issue-actions=comment
            fi  
          done < $GITHUB_OUTPUT       
  handle-success:
    runs-on: ubuntu-latest
      #  group: ka0s
    needs: [job-core]
    if: ${{ success() }}
    steps:
      - id: handle-success-execution
        name: handle-success-execution
        env:
          GH_TOKEN: ${{ secrets.KAOS_REPO_TOKEN }}
        run: |
          # Si todo ha ido correcto añadimos el contenido del fichero 
          RNNUMBER=$(echo "${{ github.ref_name }}" | grep -o '[0-9]*')
          gh issue comment $RNNUMBER --body-file ${{ env.KAOS_JSON }}${{ github.run_id }}.json
          echo "Todo ha ido bien"
  handle_failure:
    runs-on: ubuntu-latest
      #  group: ka0s
    needs: [job-core, handle-success]
    if: ${{ failure() }} 
    steps:
      - id: handle-failure-execution
        name: handle-failure-execution
        env:
          GH_TOKEN: ${{ secrets.KAOS_REPO_TOKEN }}
        run: |
          echo "Error detected in process"
          RNNUMBER=$(echo "${{ github.ref_name }}" | grep -o '[0-9]*')
          gh run view ${{ github.run_id }} --log-failed > failerror.log
          gh issue comment $RNNUMBER --body-file failerror.log
  end-workflow:
    runs-on: ubuntu-latest
      #  group: ka0s
    needs: [job-core, handle-success, handle_failure]
    if: ${{ always() && !contains(github.event.head_commit.message, '[Ka0S] ') }} 
    env:
        GH_TOKEN: ${{ secrets.KAOS_ACTIONS_TOKEN }}
    steps:
      - id: repo
        name: Checkout code
        if: ${{ always() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.KAOS_REPO_TOKEN }}
      - id: end-process
        name: Finaliza el workflow
        run: |
          echo "End process"
          gh workflow run inspector.yml --ref 'main' -f kaos-issue-id="" -f kaos-workflow-id="${{ env.KAOS_CODE }}" -f kaos-user-start=""
          RNNUMBER=$(echo "${{ github.ref_name }}" | grep -o '[0-9]*')
          gh issue comment $RNNUMBER --body "Se finaliza Ka0s ${{ env.KAOS_CODE }}"
