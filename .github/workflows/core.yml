name: Ka0s ka0s Execution
on:
  push:
    branches:
      - main
permissions:
  contents: write
  actions: write
  issues: write
  pull-requests: write
env:
  KAOS_MODULE: "[Ka0S] CORE IaC"
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} }}
  KAOS_PATH_RESUME: "core/outputs/iac/r/"
  KAOS_RUNNER_JSON: "core/iac/r.json"
jobs:
  job-repo:
    runs-on: 
      group: ka0s
    steps:
      - id: repo
        name: Checkout repository
        if: ${{ success() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }} }}
  job-user:
    runs-on: 
      group: ka0s
    needs: check-issue
    outputs:
      KAOS_EXECUTION_TYPE: ${{ steps.extract.outputs.KAOS_EXECUTION_TYPE }}
      KAOS_EXECUTION_VARS: ${{ steps.extract.outputs.KAOS_EXECUTION_VARS }}
    if: ${{ success() }}
    steps:
      - id: extract
        name: extract data
        if: ${{ success() }}
        run: |
            echo "Extract data"
      - id: data
        name: Check data
        if: ${{ success() }}
        run: |
            echo "Check lógical data"
            # Cambiamos de Backlog a In Progress
            _timestamp=$(TZ='Europe/Madrid' date +'%Y-%m-%d %H:%M:%S %Z')
            echo "($_timestamp) - Se comprobado los datos asociados a la tarjeta #${{ env.KAOS_ISSUE_NUMBER }}." >> ${{ env.KAOS_PATH_OUTPUT}}${{ env.KAOS_CODE}}-${{ env.KAOS_ISSUE_NUMBER}}.txt
  job-docker:
    runs-on: 
      group: ka0s
    needs: check-data
    steps:
      - id: show
        name: Show data
        if: ${{ success() }}
        run: |
          echo "Datos de la ejecución"
          echo "KAOS_ISSUE_NUMBER: $KAOS_ISSUE_NUMBER" 
          echo "KAOS_ISSUE_TITLE: $KAOS_ISSUE_TITLE"
          echo "KAOS_ISSUE_BODY: $KAOS_ISSUE_BODY"
          _timestamp=$(TZ='Europe/Madrid' date +'%Y-%m-%d %H:%M:%S %Z')
          echo "($_timestamp) - Estos son los datos de la ejecucion ${{ env.KAOS_CODE}} de la tarjeta #${{ env.KAOS_ISSUE_NUMBER }}." >> ${{ env.KAOS_PATH_OUTPUT}}${{ env.KAOS_CODE}}-${{ env.KAOS_ISSUE_NUMBER}}.txt
          echo "KAOS_ISSUE_NUMBER: $KAOS_ISSUE_NUMBER" >> ${{ env.KAOS_PATH_OUTPUT}}${{ env.KAOS_CODE}}-${{ env.KAOS_ISSUE_NUMBER}}.txt
          echo "KAOS_ISSUE_TITLE: $KAOS_ISSUE_TITLE" >> ${{ env.KAOS_PATH_OUTPUT}}${{ env.KAOS_CODE}}-${{ env.KAOS_ISSUE_NUMBER}}.txt
          echo "KAOS_ISSUE_BODY: $KAOS_ISSUE_BODY" >> ${{ env.KAOS_PATH_OUTPUT}}${{ env.KAOS_CODE}}-${{ env.KAOS_ISSUE_NUMBER}}.txt
  job-runner:
    runs-on: 
      group: ka0s
    needs: [job-repo]
    outputs:
        KAOS_RUNNER_STATUS: ${{ steps.read.outputs.KAOS_RUNNER_STATUS }}
        KAOS_RUNNER_ACTION: ${{ steps.read.outputs.KAOS_RUNNER_ACTION }}
        KAOS_RUNNER_GROUPNAME: ${{ steps.read.outputs.KAOS_RUNNER_GROUPNAME }}
        KAOS_RUNNER_NUMBER: ${{ steps.read.outputs.KAOS_RUNNER_NUMBER }}
    steps:
      - id: read
        name: Read json
        if: ${{ success() }}
        run: |
          # Sección donde vamos a leer el contenido del fichero que nos permite realizar la ejecución
          # Leer el fichero JSON
            json_data=$(cat ${{ env.KAOS_RUNNER_JSON }})
          # Extraer los valores usando jq
          runner=$(echo $json_data | jq -r '.runner')
          echo "KAOS_RUNNER_STATUS=$runner" >> $GITHUB_OUTPUT
          action=$(echo $json_data | jq -r '.action')
          echo "KAOS_RUNNER_ACTION=$action" >> $GITHUB_OUTPUT
          groupname=$(echo $json_data | jq -r '.groupname')
          echo "KAOS_RUNNER_GROUPNAME=$groupname" >> $GITHUB_OUTPUT
          number=$(echo $json_data | jq -r '.number')
          echo "KAOS_RUNNER_NUMBER=$number" >> $GITHUB_OUTPUT
          if
      - id: create
        name: Create execution
        if: ${{ success() && steps.read.outputs.KAOS_RUNNER_ACTION == "create" }}
        run: |
          # Bucle for que repite el proceso
          for ((i=1; i<=${{ steps.read.outputs.KAOS_RUNNER_NUMBER }}; i++))
            #Solicitamos la creación del contener basado en la imagen de kaos:latest
            ssh -i kaosmaster} kaos@master.ka0s.io -p 1712 "docker create -i -t --name core-1 github-runner:25.04"
            ssh -i ${{ secrets.KAOS_SSHKEY_PRIVATE }} ${{ secrets.KAOS_USER_CONNECT }}@${{ secrets.KAOS_HOST_1}} -p ${{ secrets.KAOS_HOSTPORT_1 }} "docker ${{ steps.read.outputs.KAOS_RUNNER_ACTION }} -i -t --name ${{ steps.read.outputs.KAOS_RUNNER_GROUPNAME }}-1 ${{ secrets.KAOS_PULL_IMAGE }} "
            ssh -i ${{ secrets.KAOS_SSHKEY_PRIVATE }} ${{ secrets.KAOS_USER_CONNECT }}@${{ secrets.KAOS_HOST_1}} -p ${{ secrets.KAOS_HOSTPORT_1 }} "docker start core-1"
            ssh -i ${{ secrets.KAOS_SSHKEY_PRIVATE }} ${{ secrets.KAOS_USER_CONNECT }}@${{ secrets.KAOS_HOST_1}} -p ${{ secrets.KAOS_HOSTPORT_1 }} "docker exec -d core-1 sh -c 'cd /actions-runner/ && ./config.sh --url https://github.com/Ka0s-Klaus --token BO7XQANVE2WLG74LZOKGGETHVTHTW --name core-1 --runnergroup core --labels core-1 --work _work --unnattend'"
            ssh -i ${{ secrets.KAOS_SSHKEY_PRIVATE }} ${{ secrets.KAOS_USER_CONNECT }}@${{ secrets.KAOS_HOST_1}} -p ${{ secrets.KAOS_HOSTPORT_1 }} "docker exec -d ka0s-4 sh -c 'cd /actions-runner/ && ./run.sh'"
          do
          # Se crea la ejecución y se obtiene el id de la ejecución
          # Se añade el id de la ejecución al fichero de salida
          echo "Execution created"
          echo "KAOS_EXECUTION_RUN_ID: $KAOS_EXECUTION_RUN_ID" >> ${{ env.KAOS_PATH_OUTPUT}}${{ env.KAOS_CODE}}-${{ env.KAOS_ISSUE_NUMBER}}.txt
  handle-success:
    runs-on: 
      group: ka0s
    needs: [end-execution]
    if: ${{ success() }}
    steps: 
      - id: handle-success-execution
        run: |
          # Si todo ha iso correctamente pasamos la tarjeta a done
          # Añadimos a cada paso el mensaje de éxito incluido en la issue original
          echo "${{ env.KAOS_MODULE }} Success in runid ${{ github.run_id }} initiated by $KAOS_ISSUE_USER trouhg issue number $KAOS_ISSUE_NUMBER."
          echo "La ejecución solicitada en el issue #$KAOS_ISSUE_NUMBER ha sido completada con éxito."
          echo "El log de la ejecucion se envuentra en ${{ secrets.KAOS_ACTIONS_URL }}${{ github.run_id }}"
          echo "Se añade el log de la ejecución al issue #$KAOS_ISSUE_NUMBER"
          echo "Se procede a cerrar la issue #$KAOS_ISSUE_NUMBER"
          # gh issue comment $KAOS_ISSUE_NUMBER --body "La ejecución ha sido SUCCESS #${{ env.KAOS_ISSUE_NUMBER }} el siguiente mensaje muestra el resultado de las operaciones"
          # gh issue comment $KAOS_ISSUE_NUMBER --body-file "${{ env.KAOS_PATH_OUTPUT}}${{ env.KAOS_CODE}}-${{ env.KAOS_ISSUE_NUMBER}}.txt"
          # gh issue close $KAOS_ISSUE_NUMBER --comment "Puede proceder a cerrar la tarjeta." --reason completed
  handle_failure:
      runs-on: 
        group: ka0s
      needs: [job-repo, check-issue, check-data, show-data, start-execution, end-execution]
      if: ${{ failure() }} 
      steps: 
        - id: check-execution
          run: |
            # si ha existido un error dejamos la tarjeta In Review
            echo "Error detected in ${{ env.KAOS_MODULE }}, creating issue..."
            KAOS_TITLE="${{ env.KAOS_MODULE }} Module failed in ${{ env.KAOS_CODE }}"
            KAOS_BODY=$(cat <<'EOF'
            **${{ env.KAOS_MODULE }}  Message:**
            El error ha sido en: ${{ env.KAOS_CODE }}
            si dispòne de los permisos necesarios 
            ejecute este comando en su consola y podrá consultar el fallo del trabajo
            gh run view ${{ env.KAOS_CODE }} --log-failed
            \`\`\`
            **La información de la ejecución ${{ secrets.KAOS_ACTIONS_URL }}${{ env.KAOS_CODE }}**
            \`\`\`
            Please investigate the issue.
            EOF
            )
            # Añadimos a la tarjeta de ejecución cual es la issue que se crea
            # Creamos la issue dado que ha fallado el modulo principal
            # gh workflow run issue.yaml --ref ${{ github.ref }} -f kaos-issue-title="$KAOS_TITLE" -f kaos-issue-body="$KAOS_BODY" -f kaos-issue-actions=create -f kaos-issue-tag="bug" -f kaos-workflow-id="${{ env.KAOS_CODE }}" -f kaos-user-start="${{ env.KAOS_ISSUE_USER }}"
            # Añadimos el comentario a la issue que dispara el proceso
            KAOS_ISSUE_BODY="OPS¡ se ha producido un error en el proceso (${{ env.KAOS_MODULE }}) lanzado desde (#$KAOS_ISSUE_NUMBER) en la ejecución (${{ env.KAOS_CODE }}) y esto ha generado una issue con el titulo ($KAOS_TITLE)"
            # gh workflow run issue.yaml --ref ${{ github.ref }} -f kaos-issue-body="$KAOS_BODY" -f kaos-issue-actions=comment -f kaos-issue-tag="bug" -f kaos-issue-id=$KAOS_ISSUE_NUMBER -f kaos-workflow-id="${{ env.KAOS_CODE }}" -f kaos-user-start="${{ env.KAOS_ISSUE_USER }}"
            # gh workflow run issue.yaml --ref ${{ github.ref }}-f kaos-issue-actions=comment -f kaos-issue-id=$KAOS_ISSUE_NUMBER -f kaos-issue-body-file="${{ env.KAOS_PATH_OUTPUT}}${{ env.KAOS_CODE}}-${{ env.KAOS_ISSUE_NUMBER}}.txt" -f kaos-workflow-id="${{ env.KAOS_CODE }}" -f kaos-user-start="${{ env.KAOS_ISSUE_USER }}"
  end-workflow:
    runs-on: 
      group: ka0s
    needs: [job-repo, check-issue, check-data, show-data, start-execution, end-execution, handle-success, handle_failure]
    if: ${{ always() }}
    steps:
      - id: end-process
        name: Finaliza el workflow
        run: |
          echo "End process"
          gh workflow run inspector.yaml --ref ${{ github.ref }} -f kaos-issue-id="$KAOS_ISSUE_NUMBER" -f kaos-workflow-id="${{ env.KAOS_CODE }}" -f kaos-user-start="${{ env.KAOS_ISSUE_USER }}"
